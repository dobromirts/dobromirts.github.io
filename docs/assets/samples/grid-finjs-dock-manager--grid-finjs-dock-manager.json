{"addTsConfig":false,"sampleFiles":[{"hasRelativeAssetsUrls":false,"path":"src/app/grid-finjs-dock-manager/grid-finjs-dock-manager.component.ts","content":"/* eslint-disable max-len */\r\nimport { AfterViewInit, ChangeDetectorRef, Component, ComponentFactoryResolver, ElementRef, Renderer2, OnDestroy, OnInit, DoCheck, TemplateRef, ViewChild, ViewContainerRef, ViewEncapsulation } from '@angular/core';\r\nimport { AbsoluteScrollStrategy, ConnectedPositioningStrategy, DefaultSortingStrategy, GridColumnDataType, IgxColumnComponent, IgxGridComponent, IgxOverlayOutletDirective, IgxSelectComponent, OverlaySettings, SortingDirection } from 'igniteui-angular';\r\nimport { IgcDockManagerLayout, IgcDockManagerPaneType, IgcSplitPane, IgcSplitPaneOrientation } from 'igniteui-dockmanager';\r\nimport { Subject } from 'rxjs';\r\nimport { first, takeUntil } from 'rxjs/operators';\r\nimport { FloatingPanesService } from '../services/floating-panes.service';\r\nimport { SignalRService } from '../services/signal-r.service';\r\nimport { DockSlotComponent, GridHostDirective } from './dock-slot.component';\r\n@Component({\r\n  encapsulation: ViewEncapsulation.None,\r\n  providers: [SignalRService, FloatingPanesService],\r\n  selector: 'app-finjs-dock-manager',\r\n  templateUrl: './grid-finjs-dock-manager.component.html',\r\n  styleUrls: ['./grid-finjs-dock-manager.component.scss']\r\n})\r\nexport class GridFinJSDockManagerComponent implements OnInit, OnDestroy, AfterViewInit, DoCheck {\r\n    @ViewChild('grid1', { static: true }) public grid1: IgxGridComponent;\r\n    @ViewChild('grid2', { static: true }) public grid2: IgxGridComponent;\r\n    @ViewChild(GridHostDirective) public host: GridHostDirective;\r\n    @ViewChild('dock', { read: ElementRef }) public dockManager: ElementRef<HTMLIgcDockmanagerElement>;\r\n    @ViewChild('priceTemplate', { read: TemplateRef })\r\n    public priceTemplate: TemplateRef<any>;\r\n    @ViewChild(IgxSelectComponent) public select: IgxSelectComponent;\r\n    @ViewChild('freq', { read: IgxSelectComponent }) public selectFrequency: IgxSelectComponent;\r\n    @ViewChild(IgxOverlayOutletDirective) outlet: IgxOverlayOutletDirective;\r\n\r\n    public isDarkTheme = true;\r\n\r\n    public frequencyItems: number[] = [300, 600, 900];\r\n    public frequency = this.frequencyItems[1];\r\n    public dataVolumeItems: number[] = [100, 500, 1000, 5000, 10000];\r\n    public dataVolume: number = this.dataVolumeItems[1];\r\n    public isLoading = true;\r\n    public data: any;\r\n    public liveData = true;\r\n    public columnFormat = { digitsInfo: '1.3-3'};\r\n    public columnFormatChangeP = { digitsInfo: '2.3-3'};\r\n    public slotCounter = 1;\r\n    public customOverlaySettings: OverlaySettings = {\r\n        positionStrategy: new ConnectedPositioningStrategy(),\r\n        scrollStrategy: new AbsoluteScrollStrategy()\r\n    };\r\n    public freqOverlaySettings: OverlaySettings = {\r\n        positionStrategy: new ConnectedPositioningStrategy(),\r\n        scrollStrategy: new AbsoluteScrollStrategy()\r\n    };\r\n\r\n    public docLayout: IgcDockManagerLayout = {\r\n        rootPane: {\r\n            type: IgcDockManagerPaneType.splitPane,\r\n            orientation: IgcSplitPaneOrientation.horizontal,\r\n            panes: [\r\n                {\r\n                    type: IgcDockManagerPaneType.contentPane,\r\n                    contentId: 'actionPane',\r\n                    header: 'Actions pane',\r\n                    size: 20,\r\n                    isPinned: false,\r\n                    allowClose: false\r\n                },\r\n                {\r\n                    size: 50,\r\n                    type: IgcDockManagerPaneType.contentPane,\r\n                    contentId: 'gridStockPrices',\r\n                    header: 'Stock Market Data',\r\n                    allowClose: false\r\n                },\r\n                {\r\n                    type: IgcDockManagerPaneType.splitPane,\r\n                    orientation: IgcSplitPaneOrientation.vertical,\r\n                    size: 50,\r\n                    panes: [\r\n                        {\r\n                        type: IgcDockManagerPaneType.documentHost,\r\n                        size: 50,\r\n                        rootPane: {\r\n                            type: IgcDockManagerPaneType.splitPane,\r\n                            orientation: IgcSplitPaneOrientation.horizontal,\r\n                            panes: [\r\n                                {\r\n                                    type: IgcDockManagerPaneType.tabGroupPane,\r\n                                    panes: [\r\n                                        {\r\n                                            type: IgcDockManagerPaneType.contentPane,\r\n                                            contentId: 'forexMarket',\r\n                                            header: 'Market Data 1'\r\n                                        },\r\n                                        {\r\n                                            type: IgcDockManagerPaneType.contentPane,\r\n                                            contentId: 'content4',\r\n                                            header: 'Market Data 2'\r\n                                        }\r\n                                    ]\r\n                                }\r\n                            ]\r\n                        }},\r\n                       {\r\n                        type: IgcDockManagerPaneType.contentPane,\r\n                        contentId: 'etfStockPrices',\r\n                        header: 'Market Data 3',\r\n                        size: 50,\r\n                        allowClose: false\r\n                       }\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        floatingPanes: []\r\n    };\r\n\r\n    public columns: { field: string,\r\n                    width: string,\r\n                    sortable: boolean,\r\n                    filterable: boolean,\r\n                    type: GridColumnDataType,\r\n                    groupable?: boolean,\r\n                    cellClasses?: string,\r\n                    bodyTemplate?: string } [] = [\r\n        { field: 'buy', width: '110px', sortable: false, filterable: false, type: 'currency' },\r\n        { field: 'sell', width: '110px', sortable: false, filterable: false, type: 'currency' },\r\n        { field: 'openPrice', width: '120px', sortable: true, filterable: true, type: 'currency'},\r\n        { field: 'lastUpdated', width: '120px', sortable: true, filterable: true, type: 'date'},\r\n        { field: 'spread', width: '110px', sortable: false, filterable: false, type: 'number' },\r\n        { field: 'volume', width: '110px', sortable: true, filterable: false, type: 'number' },\r\n        { field: 'settlement', width: '100px', sortable: true, filterable: true, type: 'string', groupable: true },\r\n        { field: 'country', width: '100px', sortable: true, filterable: true, type: 'string'},\r\n        { field: 'highD', width: '110px', sortable: true, filterable: false, type: 'currency' },\r\n        { field: 'lowD', width: '110px', sortable: true, filterable: false, type: 'currency' },\r\n        { field: 'highY', width: '110px', sortable: true, filterable: false, type: 'currency' },\r\n        { field: 'lowY', width: '110px', sortable: true, filterable: false, type: 'currency' },\r\n        { field: 'startY', width: '110px', sortable: true, filterable: false, type: 'currency' },\r\n        { field: 'indGrou', width: '136px', sortable: false, filterable: false, type: 'string'},\r\n        { field: 'indSect', width: '136px', sortable: false, filterable: false, type: 'string'},\r\n        { field: 'indSubg', width: '136px', sortable: false, filterable: false, type: 'string'},\r\n        { field: 'secType', width: '136px', sortable: false, filterable: false, type: 'string'},\r\n        { field: 'issuerN', width: '136px', sortable: false, filterable: false, type: 'string'},\r\n        { field: 'moodys', width: '136px', sortable: false, filterable: false, type: 'string'},\r\n        { field: 'fitch', width: '136px', sortable: false, filterable: false, type: 'string'},\r\n        { field: 'dbrs', width: '136px', sortable: false, filterable: false, type: 'string'},\r\n        { field: 'collatT', width: '136px', sortable: false, filterable: false, type: 'string'},\r\n        { field: 'curncy', width: '136px', sortable: false, filterable: false, type: 'string'},\r\n        { field: 'security', width: '136px', sortable: false, filterable: false, type: 'string'},\r\n        { field: 'sector', width: '136px', sortable: false, filterable: false, type: 'string'},\r\n        { field: 'cusip', width: '136px', sortable: false, filterable: false, type: 'string'},\r\n        { field: 'ticker', width: '136px', sortable: false, filterable: false, type: 'string'},\r\n        { field: 'cpn', width: '136px', sortable: false, filterable: false, type: 'string'}\r\n    ];\r\n\r\n    private destroy$ = new Subject<any>();\r\n\r\n    constructor(public dataService: SignalRService, private paneService: FloatingPanesService, private cdr: ChangeDetectorRef, private componentFactoryResolver: ComponentFactoryResolver, private elementRef: ElementRef, private renderer:Renderer2) {}\r\n\r\n    public ngOnInit() {\r\n        this.dataService.startConnection(this.frequency, this.dataVolume, true, false);\r\n        this.data = this.dataService.data;\r\n        this.data.pipe(takeUntil(this.destroy$)).subscribe((data) => {\r\n            if (data.length !== 0) {\r\n                this.isLoading = false;\r\n            };\r\n        });\r\n    }\r\n\r\n    public ngOnDestroy() {\r\n        this.dataService.stopLiveData();\r\n        this.destroy$.next(true);\r\n        this.destroy$.complete();\r\n    }\r\n\r\n    public ngDoCheck() {\r\n        if (this.isDarkTheme) {\r\n            this.renderer.removeClass(this.elementRef.nativeElement, 'light-theme');\r\n            this.renderer.addClass(this.elementRef.nativeElement, 'dark-theme');\r\n        }\r\n        else {\r\n            this.renderer.removeClass(this.elementRef.nativeElement, 'dark-theme');\r\n            this.renderer.addClass(this.elementRef.nativeElement, 'light-theme');\r\n        }\r\n    }\r\n\r\n    public ngAfterViewInit() {\r\n        // This 500ms timeout is used as a workaround for StackBlitz ExpressionChangedAfterItHasBeenChecked Error\r\n        setTimeout(() => {\r\n            const x = (this.dockManager.nativeElement.getBoundingClientRect().width / 3);\r\n            const y = (this.dockManager.nativeElement.getBoundingClientRect().height / 3);\r\n\r\n            this.paneService.initialPanePosition = { x, y };\r\n            this.grid2.selectColumns(['price', 'change', 'changeP']);\r\n            this.customOverlaySettings.target = this.select.inputGroup.element.nativeElement;\r\n            this.customOverlaySettings.outlet = this.outlet;\r\n            this.freqOverlaySettings.target = this.selectFrequency.inputGroup.element.nativeElement;\r\n            this.freqOverlaySettings.outlet = this.outlet;\r\n            this.grid1.groupingExpressions = [{\r\n                dir: SortingDirection.Desc,\r\n                fieldName: 'category',\r\n                ignoreCase: false,\r\n                strategy: DefaultSortingStrategy.instance()\r\n            },\r\n            {\r\n                dir: SortingDirection.Desc,\r\n                fieldName: 'type',\r\n                ignoreCase: false,\r\n                strategy: DefaultSortingStrategy.instance()\r\n            },\r\n            {\r\n                dir: SortingDirection.Desc,\r\n                fieldName: 'settlement',\r\n                ignoreCase: false,\r\n                strategy: DefaultSortingStrategy.instance()\r\n            }];\r\n        }, 500);\r\n    }\r\n\r\n    public paramsChanged() {\r\n        this.dataService.hasRemoteConnection ? this.dataService.broadcastParams(this.frequency, this.dataVolume, true, false) :\r\n            this.dataService.startConnection(this.frequency, this.dataVolume, true, false);\r\n        this.data = this.dataService.data;\r\n    }\r\n\r\n    public stopFeed() {\r\n        this.dataService.stopLiveData();\r\n    }\r\n\r\n    public streamData(event) {\r\n        event.checked ? this.paramsChanged() : this.stopFeed();\r\n        this.liveData = event.checked;\r\n    }\r\n\r\n    /* eslint-disable @typescript-eslint/member-ordering */\r\n    /** Grid CellStyles and CellClasses */\r\n    private negative = (rowData: any): boolean => rowData['changeP'] < 0;\r\n    private positive = (rowData: any): boolean => rowData['changeP'] > 0;\r\n    private changeNegative = (rowData: any): boolean => rowData['changeP'] < 0 && rowData['changeP'] > -1;\r\n    private changePositive = (rowData: any): boolean => rowData['changeP'] > 0 && rowData['changeP'] < 1;\r\n    private strongPositive = (rowData: any): boolean => rowData['changeP'] >= 1;\r\n    private strongNegative = (rowData: any, key: string): boolean => rowData['changeP'] <= -1;\r\n\r\n    public trends = {\r\n        changeNeg: this.changeNegative,\r\n        changePos: this.changePositive,\r\n        negative: this.negative,\r\n        positive: this.positive,\r\n        strongNegative: this.strongNegative,\r\n        strongPositive: this.strongPositive\r\n    };\r\n\r\n    public trendsChange = {\r\n        changeNeg2: this.changeNegative,\r\n        changePos2: this.changePositive,\r\n        strongNegative2: this.strongNegative,\r\n        strongPositive2: this.strongPositive\r\n    };\r\n\r\n    public createGrid() {\r\n        const id: string = 'slot-' + this.slotCounter++;\r\n        const splitPane: IgcSplitPane = {\r\n            type: IgcDockManagerPaneType.splitPane,\r\n            orientation: IgcSplitPaneOrientation.horizontal,\r\n            floatingWidth: 550,\r\n            floatingHeight: 350,\r\n            panes: [\r\n                {\r\n                    type: IgcDockManagerPaneType.contentPane,\r\n                    header: id,\r\n                    contentId: id\r\n                }\r\n            ]\r\n        };\r\n        this.paneService.appendPane(splitPane);\r\n        this.dockManager.nativeElement.layout.floatingPanes.push(splitPane);\r\n        this.docLayout = { ...this.dockManager.nativeElement.layout };\r\n        this.cdr.detectChanges();\r\n\r\n        // Create Dock Slot Component\r\n        const dockSlotComponentFactory = this.componentFactoryResolver.resolveComponentFactory(DockSlotComponent);\r\n        const dockSlotComponent = this.host.viewContainerRef.createComponent(dockSlotComponentFactory);\r\n        dockSlotComponent.instance.id = id;\r\n        dockSlotComponent.instance.viewInit.pipe(first()).subscribe(() => {\r\n            const gridViewContainerRef = dockSlotComponent.instance.gridHost.viewContainerRef;\r\n            this.loadGridComponent(gridViewContainerRef, dockSlotComponent.instance.destroy$);\r\n        });\r\n    }\r\n\r\n    public loadGridComponent(viewContainerRef: ViewContainerRef, destructor: Subject<any>) {\r\n        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(IgxGridComponent);\r\n        viewContainerRef.clear();\r\n\r\n        const componentRef = viewContainerRef.createComponent(componentFactory);\r\n        const grid = (componentRef.instance as IgxGridComponent);\r\n        grid.autoGenerate = true;\r\n        this.dataService.data.pipe(takeUntil(destructor)).subscribe(d => grid.data = d);\r\n        grid.columnInit.pipe(takeUntil(destructor)).subscribe((col: IgxColumnComponent) => {\r\n            if (col.field === 'price') {\r\n                col.cellClasses = this.trends;\r\n                col.bodyTemplate = this.priceTemplate;\r\n            }\r\n            if (col.field === 'change' || col.field === 'changeP') {\r\n                col.cellClasses = this.trendsChange;\r\n            }\r\n        });\r\n        grid.columnSelection = 'multiple';\r\n        grid.cellSelection = 'none';\r\n        grid.displayDensity = 'compact';\r\n\r\n        // Use detectChanges because of ExpressionChangedAfterItHasBeenChecked Error when creating a dynamic pane\r\n        this.cdr.detectChanges();\r\n    }\r\n\r\n    /* eslint-enable @typescript-eslint/member-ordering */\r\n}\r\n","isMain":true,"fileExtension":"ts","fileHeader":"ts"},{"hasRelativeAssetsUrls":false,"path":"src/app/grid-finjs-dock-manager/grid-finjs-dock-manager.component.html","content":"<igc-dockmanager #dock class=\"dock-m-position igx-scrollbar\" [layout]=\"docLayout\">\r\n    <div class=\"actionPane\" slot=\"actionPane\" style=\"height: 100%; padding: 20px;\">\r\n        <div class=\"actionItem\">\r\n            Change theme: <br/> <igx-switch [(ngModel)]=\"isDarkTheme\">Dark Mode</igx-switch>\r\n        </div>\r\n        <div class=\"actionItem\">\r\n            Start/Stop live data: <igx-switch [(ngModel)]=\"liveData\" (change)=\"streamData($event)\">{{ liveData ===\r\n                true ? 'Streaming' : 'Not Streaming' }}</igx-switch>\r\n        </div>\r\n        <div class=\"actionItem\">\r\n            <!-- Change volume -->\r\n            <igx-select [(ngModel)]=\"dataVolume\" (ngModelChange)=\"paramsChanged()\" [overlaySettings]=\"customOverlaySettings\">\r\n                <label igxLabel>Change data volume</label>\r\n                <igx-prefix>\r\n                    <igx-icon>view_list</igx-icon>\r\n                </igx-prefix>\r\n                <igx-select-item *ngFor=\"let item of dataVolumeItems\" [value]=\"item\">\r\n                    {{item}}\r\n                </igx-select-item>\r\n            </igx-select>\r\n        </div>\r\n        <div class=\"actionItem\">\r\n            <!-- Change frequency -->\r\n            <igx-select [(ngModel)]=\"frequency\" (ngModelChange)=\"paramsChanged()\" [overlaySettings]=\"freqOverlaySettings\" #freq>\r\n                <label igxLabel>Change update frequency</label>\r\n                <igx-prefix>\r\n                    <igx-icon>cell_wifi</igx-icon>\r\n                </igx-prefix>\r\n                <igx-select-item *ngFor=\"let item of frequencyItems\" [value]=\"item\">\r\n                    {{item}}\r\n                </igx-select-item>\r\n            </igx-select>\r\n        </div>\r\n        <div igxButton (click)=\"createGrid()\" [disabled]=\"docLayout.floatingPanes.length >= 5\">Add Floating Pane</div>\r\n        <div igxOverlayOutlet #outlet></div>\r\n    </div>\r\n    <div slot=\"gridStockPrices\" style=\"height: 100%;\">\r\n        <igx-grid #grid1 [data]=\"data | async\" [displayDensity]=\"'compact'\" [isLoading]=\"isLoading\"\r\n            [allowFiltering]=\"true\" [filterMode]=\"'excelStyleFilter'\" [primaryKey]=\"'id'\"\r\n            [columnSelection]=\"'multiple'\" [cellSelection]=\"'none'\" [outlet]=\"filteringOverlayOutlet\">\r\n            <igx-column [field]=\"'id'\" [width]=\"'70px'\" [hidden]=\"true\" [sortable]=\"true\"></igx-column>\r\n            <igx-column [field]=\"'category'\" [width]=\"'120px'\" [sortable]=\"true\"></igx-column>\r\n            <igx-column [field]=\"'type'\" [width]=\"'100px'\" [sortable]=\"true\" [filterable]='false'>\r\n            </igx-column>\r\n            <igx-column [field]=\"'contract'\" [width]=\"'100px'\" [sortable]=\"true\" [groupable]=\"true\">\r\n            </igx-column>\r\n            <igx-column [field]=\"'price'\" [width]=\"'130px'\" dataType=\"number\" [cellClasses]=\"trends\"\r\n                [sortable]=\"true\">\r\n                <ng-template igxCell let-cell=\"cell\" #priceTemplate>\r\n                    <div class=\"finjs-icons\">\r\n                        <span>{{cell.value | currency:'USD':'symbol':'1.4-4'}}</span>\r\n                        <igx-icon *ngIf=\"trends.positive(cell.row.data)\">trending_up</igx-icon>\r\n                        <igx-icon *ngIf=\"trends.negative(cell.row.data)\">trending_down</igx-icon>\r\n                    </div>\r\n                </ng-template>\r\n            </igx-column>\r\n            <igx-column [field]=\"'change'\" [width]=\"'120px'\" dataType=\"number\" [headerClasses]=\"'headerAlignSyle'\"\r\n                [sortable]=\"true\" [cellClasses]=\"trendsChange\">\r\n            </igx-column>\r\n            <igx-column [field]=\"'changeP'\" [width]=\"'110px'\" dataType=\"percent\"\r\n                [pipeArgs]=\"columnFormatChangeP\" [sortable]=\"true\" [cellClasses]=\"trendsChange\">\r\n            </igx-column>\r\n            <igx-column *ngFor=\"let c of columns\" [field]=\"c.field\" [width]=\"c.width\"\r\n                [sortable]=\"c.sortable\" [filterable]=\"c.filterable\" [dataType]=\"c.type\"\r\n                [cellClasses]=\"c.cellClasses\" [bodyTemplate]=\"c.bodyTemplate\" [groupable]=\"c.groupable\">\r\n            </igx-column>\r\n        </igx-grid>\r\n    </div>\r\n    <div slot=\"forexMarket\" style=\"height: 100%;\">\r\n        <igx-grid #grid2 [data]=\"data | async\" [displayDensity]=\"'compact'\" [isLoading]=\"isLoading\"\r\n            [allowFiltering]=\"true\" [filterMode]=\"'excelStyleFilter'\" [primaryKey]=\"'id'\" [outlet]=\"filteringOverlayOutlet\"\r\n            [columnSelection]=\"'multiple'\" [cellSelection]=\"'none'\">\r\n            <igx-column [field]=\"'id'\" [width]=\"'70px'\" [hidden]='true' [sortable]=\"true\"></igx-column>\r\n            <igx-column [field]=\"'category'\" [width]=\"'120px'\" [sortable]=\"true\" [groupable]=\"true\"></igx-column>\r\n            <igx-column [field]=\"'type'\" [width]=\"'100px'\" [sortable]=\"true\" [filterable]='false' [groupable]=\"true\">\r\n            </igx-column>\r\n            <igx-column [field]=\"'contract'\" [width]=\"'100px'\" [sortable]=\"true\" [groupable]=\"true\">\r\n            </igx-column>\r\n            <igx-column [field]=\"'price'\" [width]=\"'120px'\" dataType=\"number\" [cellClasses]=\"trends\"\r\n                [sortable]=\"true\">\r\n                <ng-template igxCell let-cell=\"cell\">\r\n                    <div class=\"finjs-icons\">\r\n                        <span>{{cell.value | currency:'USD':'symbol':'1.4-4'}}</span>\r\n                        <igx-icon *ngIf=\"trends.positive(cell.row.data)\">trending_up</igx-icon>\r\n                        <igx-icon *ngIf=\"trends.negative(cell.row.data)\">trending_down</igx-icon>\r\n                    </div>\r\n                </ng-template>\r\n            </igx-column>\r\n            <igx-column [field]=\"'change'\" [width]=\"'120px'\" dataType=\"number\" [headerClasses]=\"'headerAlignSyle'\"\r\n                [sortable]=\"true\" [cellClasses]=\"trendsChange\">\r\n            </igx-column>\r\n            <igx-column [field]=\"'changeP'\" [width]=\"'110px'\" dataType=\"percent\"\r\n                [pipeArgs]=\"columnFormatChangeP\" [sortable]=\"true\" [cellClasses]=\"trendsChange\">\r\n            </igx-column>\r\n            <igx-column *ngFor=\"let c of columns\" [field]=\"c.field\" [width]=\"c.width\"\r\n                [sortable]=\"c.sortable\" [filterable]=\"c.filterable\" [dataType]=\"c.type\"\r\n                [cellClasses]=\"c.cellClasses\" [bodyTemplate]=\"c.bodyTemplate\" [groupable]=\"c.groupable\">\r\n            </igx-column>\r\n        </igx-grid>\r\n    </div>\r\n    <div slot=\"content4\" style=\"height: 100%;\">\r\n        <igx-grid #grid3 [data]=\"data | async\" [displayDensity]=\"'compact'\" [isLoading]=\"isLoading\"\r\n            [allowFiltering]=\"true\" [filterMode]=\"'excelStyleFilter'\" [primaryKey]=\"'id'\" [outlet]=\"filteringOverlayOutlet\"\r\n            [columnSelection]=\"'multiple'\" [cellSelection]=\"'none'\">\r\n            <igx-column [field]=\"'id'\" [width]=\"'70px'\" [hidden]='true' [sortable]=\"true\"></igx-column>\r\n            <igx-column [field]=\"'category'\" [width]=\"'120px'\" [sortable]=\"true\" [groupable]=\"true\"></igx-column>\r\n            <igx-column [field]=\"'type'\" [width]=\"'100px'\" [sortable]=\"true\" [filterable]='false' [groupable]=\"true\">\r\n            </igx-column>\r\n            <igx-column [field]=\"'contract'\" [width]=\"'100px'\" [sortable]=\"true\" [groupable]=\"true\">\r\n            </igx-column>\r\n            <igx-column [field]=\"'price'\" [width]=\"'120px'\" dataType=\"number\" [cellClasses]=\"trends\"\r\n                [sortable]=\"true\">\r\n                <ng-template igxCell let-cell=\"cell\">\r\n                    <div class=\"finjs-icons\">\r\n                        <span>{{cell.value | currency:'USD':'symbol':'1.4-4'}}</span>\r\n                        <igx-icon *ngIf=\"trends.positive(cell.row.data)\">trending_up</igx-icon>\r\n                        <igx-icon *ngIf=\"trends.negative(cell.row.data)\">trending_down</igx-icon>\r\n                    </div>\r\n                </ng-template>\r\n            </igx-column>\r\n            <igx-column [field]=\"'change'\" [width]=\"'120px'\" dataType=\"number\" [headerClasses]=\"'headerAlignSyle'\"\r\n                [sortable]=\"true\" [cellClasses]=\"trendsChange\">\r\n            </igx-column>\r\n            <igx-column [field]=\"'changeP'\" [width]=\"'110px'\" dataType=\"percent\"\r\n                [pipeArgs]=\"columnFormatChangeP\" [sortable]=\"true\" [cellClasses]=\"trendsChange\">\r\n            </igx-column>\r\n            <igx-column *ngFor=\"let c of columns\" [field]=\"c.field\" [width]=\"c.width\"\r\n                [sortable]=\"c.sortable\" [filterable]=\"c.filterable\" [dataType]=\"c.type\"\r\n                [cellClasses]=\"c.cellClasses\" [bodyTemplate]=\"c.bodyTemplate\" [groupable]=\"c.groupable\">\r\n            </igx-column>\r\n        </igx-grid>\r\n    </div>\r\n    <div slot=\"etfStockPrices\" style=\"height: 100%;\">\r\n        <igx-grid #grid4 [data]=\"data | async\" [displayDensity]=\"'compact'\" [isLoading]=\"isLoading\"\r\n            [allowFiltering]=\"true\" [filterMode]=\"'excelStyleFilter'\" [primaryKey]=\"'id'\" [outlet]=\"filteringOverlayOutlet\"\r\n            [columnSelection]=\"'multiple'\" [cellSelection]=\"'none'\">\r\n            <igx-paginator></igx-paginator>\r\n            <igx-column [field]=\"'id'\" [width]=\"'70px'\" [hidden]='true' [sortable]=\"true\"></igx-column>\r\n            <igx-column [field]=\"'category'\" [width]=\"'120px'\" [sortable]=\"true\" [groupable]=\"true\"></igx-column>\r\n            <igx-column [field]=\"'type'\" [width]=\"'100px'\" [sortable]=\"true\" [filterable]='false' [groupable]=\"true\">\r\n            </igx-column>\r\n            <igx-column [field]=\"'contract'\" [width]=\"'100px'\" [sortable]=\"true\" [groupable]=\"true\">\r\n            </igx-column>\r\n            <igx-column [field]=\"'price'\" [width]=\"'120px'\" dataType=\"number\" [cellClasses]=\"trends\"\r\n                [sortable]=\"true\">\r\n                <ng-template igxCell let-cell=\"cell\">\r\n                    <div class=\"finjs-icons\">\r\n                        <span>{{cell.value | currency:'USD':'symbol':'1.4-4'}}</span>\r\n                        <igx-icon *ngIf=\"trends.positive(cell.row.data)\">trending_up</igx-icon>\r\n                        <igx-icon *ngIf=\"trends.negative(cell.row.data)\">trending_down</igx-icon>\r\n                    </div>\r\n                </ng-template>\r\n            </igx-column>\r\n            <igx-column [field]=\"'change'\" [width]=\"'120px'\" dataType=\"number\" [headerClasses]=\"'headerAlignSyle'\"\r\n                [sortable]=\"true\" [cellClasses]=\"trendsChange\">\r\n            </igx-column>\r\n            <igx-column [field]=\"'changeP'\" [width]=\"'110px'\" dataType=\"percent\"\r\n                [pipeArgs]=\"columnFormatChangeP\" [sortable]=\"true\" [cellClasses]=\"trendsChange\">\r\n            </igx-column>\r\n            <igx-column *ngFor=\"let c of columns\" [field]=\"c.field\" [width]=\"c.width\"\r\n                [sortable]=\"c.sortable\" [filterable]=\"c.filterable\" [dataType]=\"c.type\" [cellClasses]=\"c.cellClasses\"\r\n                [bodyTemplate]=\"c.bodyTemplate\" [groupable]=\"c.groupable\">\r\n            </igx-column>\r\n        </igx-grid>\r\n    </div>\r\n    <ng-template #host gridHost>\r\n    </ng-template>\r\n</igc-dockmanager>\r\n<div class=\"dark-theme\" #filteringOverlayOutlet=\"overlay-outlet\" igxOverlayOutlet></div>\r\n","isMain":true,"fileExtension":"html","fileHeader":"html"},{"hasRelativeAssetsUrls":false,"path":"src/app/grid-finjs-dock-manager/grid-finjs-dock-manager.component.scss","content":"@use '~igniteui-dockmanager/dist/collection/styles/igc.themes';\r\n\r\n.actionItem {\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.finjs-icons {\r\n    display: flex;\r\n    align-items: center;\r\n    igx-icon {\r\n        font-size: 16px;\r\n        width: 16px;\r\n        height: 16px;\r\n        margin-left: 4px;\r\n    }\r\n}\r\n\r\n.changePos,\r\n.changeNeg,\r\n.strongPositive,\r\n.strongNegative {\r\n    color: #fff !important;\r\n    .igx-grid__td-text {\r\n        padding: 2px 5px;\r\n    }\r\n}\r\n.positive {\r\n    color: #4eb862 !important;\r\n}\r\n.positive.strongPositive {\r\n    .igx-grid__td-text {\r\n        color: rgba(78, 184, 98, 0.8) !important;\r\n    }\r\n}\r\n.negative {\r\n    color: #d31642 !important;\r\n}\r\n.negative.strongNegative {\r\n    .igx-grid__td-text {\r\n        color: rgba(255, 19, 74, 0.8) !important;\r\n    }\r\n}\r\n// NORMAL\r\n// positive\r\n.changePos {\r\n    .igx-grid__td-text {\r\n        background: #335e3b;\r\n    }\r\n}\r\n.changePos1 {\r\n    background: #335e3b;\r\n    color: #fff;\r\n}\r\n.changePos2 {\r\n    .igx-grid__td-text {\r\n        border-right: 4px solid #335e3b;\r\n        padding-right: 15px;\r\n    }\r\n}\r\n// negative\r\n.changeNeg {\r\n    .igx-grid__td-text {\r\n        background: #7a1c32;\r\n    }\r\n}\r\n.changeNeg1 {\r\n    color: #fff;\r\n    background: #7a1c32;\r\n}\r\n.changeNeg2 {\r\n    .igx-grid__td-text {\r\n        border-right: 4px solid #7a1c32;\r\n        padding-right: 9px;\r\n    }\r\n}\r\n\r\n// STRONG\r\n// positive\r\n.strongPositive {\r\n    .igx-grid__td-text {\r\n        background: #459a55;\r\n    }\r\n}\r\n.strongPositive1 {\r\n    background: #459a55;\r\n    color: #fff;\r\n}\r\n.strongPositive2 {\r\n    .igx-grid__td-text {\r\n        border-right: 4px solid #459a55;\r\n        padding-right: 15px;\r\n    }\r\n}\r\n// negative\r\n.strongNegative {\r\n    .igx-grid__td-text {\r\n        background: #d31642;\r\n        color: #fff;\r\n    }\r\n}\r\n.strongNegative1 {\r\n    background: #d31642;\r\n    color: #fff;\r\n}\r\n.strongNegative2 {\r\n    .igx-grid__td-text {\r\n        border-right: 4px solid #d31642;\r\n        padding-right: 9px;\r\n    }\r\n}\r\n\r\n:host ::ng-deep {\r\n    .grid-area {\r\n        margin-top: 1rem;\r\n        overflow-y: hidden;\r\n        overflow-x: hidden;\r\n        width: 100%;\r\n    }\r\n\r\n    // selected\r\n    .igx-grid__td--column-selected.changePos1,\r\n    .igx-grid__td--column-selected.changePos2,\r\n    .igx-grid__td--column-selected.changePos {\r\n        background-color: #335e3b !important;\r\n        .finjs-icons,\r\n        .igx-grid__td-text {\r\n            color: #fff;\r\n        }\r\n    }\r\n    .igx-grid__td--column-selected.changeNeg1,\r\n    .igx-grid__td--column-selected.changeNeg2,\r\n    .igx-grid__td--column-selected.changeNeg {\r\n        background-color: #7a1c32 !important;\r\n        .finjs-icons,\r\n        .igx-grid__td-text {\r\n            color: #fff;\r\n        }\r\n    }\r\n    \r\n    // selected\r\n    .igx-grid__td--column-selected.strongPositive1,\r\n    .igx-grid__td--column-selected.strongPositive2,\r\n    .igx-grid__td--column-selected.strongPositive {\r\n        background-color: #459a55 !important;\r\n        .finjs-icons,\r\n        .igx-grid__td-text {\r\n            color: #fff;\r\n        }\r\n    }\r\n    .igx-grid__td--column-selected.strongNegative1,\r\n    .igx-grid__td--column-selected.strongNegative2,\r\n    .igx-grid__td--column-selected.strongNegative {\r\n        background-color: #d31642 !important;\r\n        .finjs-icons,\r\n        .igx-grid__td-text {\r\n            color: #fff;\r\n        }\r\n    }\r\n}\r\n","isMain":true,"fileExtension":"scss","fileHeader":"scss"},{"hasRelativeAssetsUrls":false,"path":"src/app/directives/prevent-scroll.directive.ts","content":"import { AfterViewInit, Directive, Host, Input, NgModule, Optional, OnDestroy, Inject } from '@angular/core';\r\nimport { IgxGridBaseDirective, IgxGridComponent, IGX_GRID_BASE } from 'igniteui-angular';\r\n\r\n@Directive({\r\n    // eslint-disable-next-line @angular-eslint/directive-selector\r\n    selector: '[igxPreventDocumentScroll]'\r\n})\r\nexport class IgxPreventDocumentScrollDirective implements AfterViewInit, OnDestroy {\r\n    private _preventScroll = true;\r\n    private gridBody: HTMLElement;\r\n\r\n    /**\r\n     *  A boolean indicating if page scroll should be prevented while mouse wheeling over the grid,\r\n     * when grid scroll has reached top or bottom. Defaults to true.\r\n     * ```html\r\n     * <igx-grid igxPreventDocumentScroll></igx-grid>\r\n     * <igx-grid [igxPreventDocumentScroll]='false'></igx-grid>\r\n     * ```\r\n     */\r\n    @Input('igxPreventDocumentScroll')\r\n    public set preventScroll(val: boolean) {\r\n        if (val === false) { this._preventScroll = false; }\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    constructor(@Host() @Optional() @Inject(IGX_GRID_BASE) private grid: IgxGridBaseDirective) {\r\n    }\r\n\r\n    public ngAfterViewInit() {\r\n        this.gridBody = this.getGridTBody();\r\n        if (this._preventScroll) {\r\n            this.gridBody.addEventListener('wheel', this.preventDocumentScroll, { passive: false });\r\n        }\r\n    }\r\n\r\n    public ngOnDestroy() {\r\n        this.gridBody.removeEventListener('wheel', this.preventDocumentScroll);\r\n    }\r\n\r\n    /**\r\n     * Prevents scrolling the page, when mouse wheel over the grid body.\r\n     */\r\n    private preventDocumentScroll(event) {\r\n        event.preventDefault();\r\n    }\r\n\r\n    private getGridTBody(): HTMLElement {\r\n        return this.grid.tbody.nativeElement;\r\n    }\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\n@NgModule({\r\n    declarations: [IgxPreventDocumentScrollDirective],\r\n    exports: [IgxPreventDocumentScrollDirective]\r\n})\r\n\r\nexport class IgxPreventDocumentScrollModule { }\r\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/services/signal-r.service.ts","content":"import { Injectable, NgZone, OnDestroy } from '@angular/core';\r\nimport * as signalR from '@microsoft/signalr';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { FinancialData, Stock } from '../data/financialData';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class SignalRService implements OnDestroy {\r\n    public data: BehaviorSubject<Stock[]>;\r\n    public hasRemoteConnection: boolean;\r\n    private hubConnection!: signalR.HubConnection;\r\n    private _timer!: ReturnType<typeof setInterval>;\r\n\r\n    constructor(private zone: NgZone) {\r\n        this.data = new BehaviorSubject([] as Stock[]);\r\n    }\r\n\r\n    public ngOnDestroy(): void {\r\n        this.stopLiveData();\r\n    }\r\n\r\n    public startConnection = (interval = 500, volume = 1000, live = false, updateAll = true): void => {\r\n        this.hubConnection = new signalR.HubConnectionBuilder()\r\n            .configureLogging(signalR.LogLevel.Trace)\r\n            .withUrl('https://www.infragistics.com/angular-apis/webapi/streamHub')\r\n            .build();\r\n        this.hubConnection\r\n            .start()\r\n            .then(() => {\r\n                this.hasRemoteConnection = true;\r\n                this.registerSignalEvents();\r\n                this.broadcastParams(interval, volume, live, updateAll);\r\n            })\r\n            .catch(() => {\r\n                this.hasRemoteConnection = false;\r\n                if (this._timer) { this.stopFeed(); }\r\n                const data = FinancialData.generateData(volume);\r\n                live ? this._timer = setInterval(() => updateAll ?\r\n                    this.updateAllPriceValues(data) : this.updateRandomPriceValues(data), interval) :\r\n                        this.getData(volume);\r\n            });\r\n    };\r\n\r\n    public broadcastParams = (frequency, volume, live, updateAll = true): void => {\r\n        this.hubConnection.invoke('updateparameters', frequency, volume, live, updateAll)\r\n            .then(() => console.log('requestLiveData', volume))\r\n            .catch(err => {\r\n                console.error(err);\r\n            });\r\n    };\r\n\r\n    public stopLiveData = (): void => {\r\n        if (this.hasRemoteConnection) {\r\n            this.hubConnection.invoke('StopTimer')\r\n            .catch(err => console.error(err));\r\n        } else {\r\n            this.stopFeed();\r\n        }\r\n    };\r\n\r\n    public getData(count: number = 10): void {\r\n        this.data.next(FinancialData.generateData(count));\r\n    }\r\n\r\n    public updateAllPriceValues(data: Stock[]): void {\r\n        this.zone.runOutsideAngular(() =>  {\r\n            const newData = FinancialData.updateAllPrices(data);\r\n            this.data.next(newData);\r\n        });\r\n    }\r\n\r\n    public updateRandomPriceValues(data: Stock[]): void {\r\n        this.zone.runOutsideAngular(() =>  {\r\n            const newData = FinancialData.updateRandomPrices(data);\r\n            this.data.next(newData);\r\n        });\r\n    }\r\n\r\n    private stopFeed(): void {\r\n        if (this._timer) {\r\n            clearInterval(this._timer);\r\n        }\r\n    }\r\n\r\n    // Register signalR events\r\n    private registerSignalEvents(): void {\r\n        this.hubConnection.onclose(() => {\r\n            this.hasRemoteConnection = false;\r\n        });\r\n        this.hubConnection.on('transferdata', (data: Stock[]) => {\r\n            this.data.next(data);\r\n        });\r\n    }\r\n}\r\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/data/financialData.ts","content":"/* eslint-disable @typescript-eslint/naming-convention */\r\nexport interface Country {\r\n    Name: string;\r\n}\r\n\r\nexport interface Region {\r\n    Name: string;\r\n    Countries: Country[];\r\n}\r\nexport interface MockFinanceData {\r\n    indGrou?: string;\r\n    indSect?: string;\r\n    indSubg?: string;\r\n    secType?: string;\r\n    cpnTyp?: string;\r\n    issuerN?: string;\r\n    moodys?: string;\r\n    fitch?: string;\r\n    dbrs?: string;\r\n    collatT?: string;\r\n    curncy?: string;\r\n    security?: string;\r\n    sector?: string;\r\n    cusip?: string;\r\n    ticker?: string;\r\n    cpn?: string;\r\n    maturity?: string;\r\n    krD_3YR?: number;\r\n    RISK_COUNTRY?: string;\r\n    MUNI_SECTOR?: string;\r\n    zV_SPREAD?: number;\r\n    kRD_5YR?: number;\r\n    kRD_1YR?: number;\r\n    PD_WALA?: string | null;\r\n}\r\n\r\nexport interface Stock extends MockFinanceData {\r\n    id?: number;\r\n    category: string;\r\n    type: string;\r\n    spread: number;\r\n    openPrice: number;\r\n    price: number;\r\n    buy: number;\r\n    sell: number;\r\n    change: number;\r\n    changeP: number;\r\n    volume: number;\r\n    highD: number;\r\n    lowD: number;\r\n    highY: number;\r\n    lowY: number;\r\n    startY: number;\r\n    'change On Year(%)': number;\r\n    categories?: Stock[];\r\n    region?: string;\r\n    country?: string;\r\n    settlement?: string;\r\n    contract?: string;\r\n    lastUpdated?: Date;\r\n    openPriceDiff?: number;\r\n    buyDiff?: number;\r\n    sellDiff?: number;\r\n    startYDiff?: number;\r\n    highYDiff?: number;\r\n    lowYDiff?: number;\r\n    highDDiff?: number;\r\n    lowDDiff?: number;\r\n}\r\n\r\nexport const REGIONS: Region[] = [\r\n    {\r\n        Name: 'North America',\r\n        Countries: [\r\n            { Name: 'Canada' },\r\n            { Name: 'United States' },\r\n            { Name: 'Mexico' }\r\n        ]\r\n    },\r\n    {\r\n        Name: 'Middle East',\r\n        Countries: [\r\n            { Name: 'Turkey' },\r\n            { Name: 'Iraq' },\r\n            { Name: 'Saudi Arabia' },\r\n            { Name: 'Syria' },\r\n            { Name: 'UAE' },\r\n            { Name: 'Israel' },\r\n            { Name: 'Jordan' },\r\n            { Name: 'Lebanon' },\r\n            { Name: 'Oman' },\r\n            { Name: 'Kuwait' },\r\n            { Name: 'Qatar' },\r\n            { Name: 'Bahrain' },\r\n            { Name: 'Iran' }\r\n        ]\r\n    },\r\n    {\r\n        Name: 'Europe',\r\n        Countries: [\r\n            { Name: 'Russia' },\r\n            { Name: 'Germany' },\r\n            { Name: 'France' },\r\n            { Name: 'United Kingdom' },\r\n            { Name: 'Italy' },\r\n            { Name: 'Spain' },\r\n            { Name: 'Poland' },\r\n            { Name: 'Romania' },\r\n            { Name: 'Netherlands' },\r\n            { Name: 'Belgium' },\r\n            { Name: 'Greece' },\r\n            { Name: 'Portugal' },\r\n            { Name: 'Czech Republic' },\r\n            { Name: 'Hungary' },\r\n            { Name: 'Sweden' },\r\n            { Name: 'Austria' },\r\n            { Name: 'Switzerland' },\r\n            { Name: 'Bulgaria' },\r\n            { Name: 'Denmark' },\r\n            { Name: 'Finland' },\r\n            { Name: 'Slovakia' },\r\n            { Name: 'Norway' },\r\n            { Name: 'Ireland' },\r\n            { Name: 'Croatia' },\r\n            { Name: 'Slovenia' },\r\n            { Name: 'Estonia' },\r\n            { Name: 'Iceland' }\r\n        ]\r\n    },\r\n    {\r\n        Name: 'Africa',\r\n        Countries: [\r\n            { Name: 'Nigeria' },\r\n            { Name: 'Ethiopia' },\r\n            { Name: 'Egypt' },\r\n            { Name: 'South Africa' },\r\n            { Name: 'Algeria' },\r\n            { Name: 'Morocco' },\r\n            { Name: 'Cameroon' },\r\n            { Name: 'Niger' },\r\n            { Name: 'Senegal' },\r\n            { Name: 'Tunisia' },\r\n            { Name: 'Libya' }\r\n        ]\r\n    },\r\n    {\r\n        Name: 'Asia Pacific',\r\n        Countries: [\r\n            { Name: 'Afghanistan' },\r\n            { Name: 'Australia' },\r\n            { Name: 'Azerbaijan' },\r\n            { Name: 'China' },\r\n            { Name: 'Hong Kong' },\r\n            { Name: 'India' },\r\n            { Name: 'Indonesia' },\r\n            { Name: 'Japan' },\r\n            { Name: 'Malaysia' },\r\n            { Name: 'New Zealand' },\r\n            { Name: 'Pakistan' },\r\n            { Name: 'Philippines' },\r\n            { Name: 'Korea' },\r\n            { Name: 'Singapore' },\r\n            { Name: 'Taiwan' },\r\n            { Name: 'Thailand' }\r\n        ]\r\n    },\r\n    {\r\n        Name: 'South America',\r\n        Countries: [\r\n            { Name: 'Argentina' },\r\n            { Name: 'Bolivia' },\r\n            { Name: 'Brazil' },\r\n            { Name: 'Chile' },\r\n            { Name: 'Colombia' },\r\n            { Name: 'Ecuador' },\r\n            { Name: 'Guyana' },\r\n            { Name: 'Paraguay' },\r\n            { Name: 'Peru' },\r\n            { Name: 'Suriname' },\r\n            { Name: 'Uruguay' },\r\n            { Name: 'Venezuela' }\r\n        ]\r\n    }\r\n];\r\n\r\nexport const Dealtype: string[] = [\r\n    'buy', 'sell'\r\n];\r\n\r\nexport const Contract: string[] = [\r\n    'Forwards', 'Futures', 'Options', 'Swap', 'CFD'\r\n];\r\n\r\nexport const Settlement: string[] = [\r\n    'Deliverable', 'Cash'\r\n];\r\n\r\nexport const MOCKFINANCEDATA: MockFinanceData[] = [\r\n    {\r\n        indGrou: 'Airlines',\r\n        indSect: 'Consumer, Cyclical',\r\n        indSubg: 'Airlines',\r\n        secType: 'PUBLIC',\r\n        // tslint:disable-next-line:object-literal-sort-keys\r\n        cpnTyp: 'FIXED',\r\n        issuerN: 'AMERICAN AIRLINES GROUP',\r\n        moodys: 'WR',\r\n        fitch: 'N.A.',\r\n        dbrs: 'N.A.',\r\n        collatT: 'NEW MONEY',\r\n        curncy: 'USD',\r\n        security: '001765866 Pfd',\r\n        sector: 'Pfd',\r\n        cusip: '1765866',\r\n        ticker: 'AAL',\r\n        cpn: '7.875',\r\n        maturity: '7/13/1939',\r\n        krD_3YR: 0.00006,\r\n        RISK_COUNTRY: '',\r\n        MUNI_SECTOR: '',\r\n        zV_SPREAD: 28.302,\r\n        kRD_5YR: 0,\r\n        kRD_1YR: -0.00187,\r\n        PD_WALA: null\r\n    }\r\n];\r\n\r\nexport const DATA: Stock[] = [\r\n    {\r\n        category: 'Metal',\r\n        type: 'Gold',\r\n        spread: 0.01,\r\n        openPrice: 1281.10,\r\n        price: 1280.7317,\r\n        buy: 1280.7267,\r\n        sell: 1280.7367,\r\n        change: -0.3683,\r\n        changeP: -0.0287,\r\n        volume: 48387,\r\n        highD: 1289.50,\r\n        lowD: 1279.10,\r\n        highY: 1306,\r\n        lowY: 1047.20,\r\n        startY: 1176.60,\r\n        'change On Year(%)': 8.8502\r\n    },\r\n    {\r\n        category: 'Metal',\r\n        type: 'Silver',\r\n        spread: 0.01,\r\n        openPrice: 17.43,\r\n        price: 17.42,\r\n        buy: 17.43,\r\n        sell: 17.43,\r\n        change: -0.01,\r\n        changeP: -0.0574,\r\n        volume: 11720,\r\n        highD: 17.51,\r\n        lowD: 17.37,\r\n        highY: 18.06,\r\n        lowY: 13.73,\r\n        startY: 15.895,\r\n        'change On Year(%)': 9.5942\r\n    },\r\n    {\r\n        category: 'Metal',\r\n        type: 'Copper',\r\n        spread: 0.02,\r\n        openPrice: 2.123,\r\n        price: 2.113,\r\n        buy: 2.123,\r\n        sell: 2.123,\r\n        change: -0.01,\r\n        changeP: -0.471,\r\n        volume: 28819,\r\n        highD: 2.16,\r\n        lowD: 2.11,\r\n        highY: 2.94,\r\n        lowY: 1.96,\r\n        startY: 2.45,\r\n        'change On Year(%)': -13.7551\r\n    },\r\n    {\r\n        category: 'Metal',\r\n        type: 'Platinum',\r\n        spread: 0.01,\r\n        openPrice: 1071.60,\r\n        price: 1071.0993,\r\n        buy: 1071.0943,\r\n        sell: 1071.1043,\r\n        change: -0.5007,\r\n        changeP: -0.0467,\r\n        volume: 3039,\r\n        highD: 1081.20,\r\n        lowD: 1070.50,\r\n        highY: 1120.60,\r\n        lowY: 812.40,\r\n        startY: 966.50,\r\n        'change On Year(%)': 10.8225\r\n    },\r\n    {\r\n        category: 'Metal',\r\n        type: 'Palladium',\r\n        spread: 0.01,\r\n        openPrice: 600.55,\r\n        price: 601.0005,\r\n        buy: 600.9955,\r\n        sell: 601.0055,\r\n        change: 0.4505,\r\n        changeP: 0.075,\r\n        volume: 651,\r\n        highD: 607.20,\r\n        lowD: 598.40,\r\n        highY: 690,\r\n        lowY: 458.6,\r\n        startY: 574.3,\r\n        'change On Year(%)': 4.6492\r\n    },\r\n    {\r\n        category: 'Oil',\r\n        type: 'Oil',\r\n        spread: 0.015,\r\n        openPrice: 45.54,\r\n        price: 45.7899,\r\n        buy: 45.7824,\r\n        sell: 45.7974,\r\n        change: 0.2499,\r\n        changeP: 0.5487,\r\n        volume: 107196,\r\n        highD: 45.94,\r\n        lowD: 45.00,\r\n        highY: 65.28,\r\n        lowY: 30.79,\r\n        startY: 48.035,\r\n        'change On Year(%)': -4.6739\r\n    },\r\n    {\r\n        category: 'Oil',\r\n        type: 'Brent',\r\n        spread: 0.01,\r\n        openPrice: 46.06,\r\n        price: 46.05,\r\n        buy: 46.06,\r\n        sell: 46.06,\r\n        change: -0.01,\r\n        changeP: -0.0217,\r\n        volume: 59818,\r\n        highD: 46.48,\r\n        lowD: 45.60,\r\n        highY: 71.14,\r\n        lowY: 30.02,\r\n        startY: 50.58,\r\n        'change On Year(%)': -8.9561\r\n    },\r\n    {\r\n        category: 'Oil',\r\n        type: 'Natural Gas',\r\n        spread: 0.02,\r\n        openPrice: 2.094,\r\n        price: 2.104,\r\n        buy: 2.094,\r\n        sell: 2.094,\r\n        change: 0.01,\r\n        changeP: 0.4776,\r\n        volume: 2783,\r\n        highD: 2.11,\r\n        lowD: 2.09,\r\n        highY: 3.20,\r\n        lowY: 1.84,\r\n        startY: 2.52,\r\n        'change On Year(%)': -16.5079\r\n    },\r\n    {\r\n        category: 'Oil',\r\n        type: 'RBOB Gas',\r\n        spread: 0.015,\r\n        openPrice: 1.5086,\r\n        price: 1.9532,\r\n        buy: 1.9457,\r\n        sell: 1.9607,\r\n        change: 0.4446,\r\n        changeP: 29.4686,\r\n        volume: 2646,\r\n        highD: 1.9532,\r\n        lowD: 1.50,\r\n        highY: 2.05,\r\n        lowY: 1.15,\r\n        startY: 1.60,\r\n        'change On Year(%)': 22.0727\r\n    },\r\n    {\r\n        category: 'Oil',\r\n        type: 'Diesel',\r\n        spread: 0.015,\r\n        openPrice: 1.3474,\r\n        price: 1.3574,\r\n        buy: 1.3474,\r\n        sell: 1.3474,\r\n        change: 0.01,\r\n        changeP: 0.7422,\r\n        volume: 2971,\r\n        highD: 1.36,\r\n        lowD: 1.34,\r\n        highY: 2.11,\r\n        lowY: 0.92,\r\n        startY: 1.515,\r\n        'change On Year(%)': -10.4026\r\n    },\r\n    {\r\n        category: 'Oil',\r\n        type: 'Ethanol',\r\n        spread: 0.01,\r\n        openPrice: 1.512,\r\n        price: 2.7538,\r\n        buy: 2.7488,\r\n        sell: 2.7588,\r\n        change: 1.2418,\r\n        changeP: 82.1323,\r\n        volume: 14,\r\n        highD: 2.7538,\r\n        lowD: 1.1168,\r\n        highY: 2.7538,\r\n        lowY: 1.1168,\r\n        startY: 1.475,\r\n        'change On Year(%)': 86.7011\r\n    },\r\n    {\r\n        category: 'Oil',\r\n        type: 'Uranium',\r\n        spread: 0.02,\r\n        openPrice: 27.55,\r\n        price: 27.58,\r\n        buy: 27.55,\r\n        sell: 27.55,\r\n        change: 0.03,\r\n        changeP: 0.1089,\r\n        volume: 12,\r\n        highD: 27.55,\r\n        lowD: 27.55,\r\n        highY: 29.32,\r\n        lowY: 21.28,\r\n        startY: 25.30,\r\n        'change On Year(%)': 9.0119\r\n    },\r\n    {\r\n        category: 'Oil',\r\n        type: 'Coal',\r\n        spread: 0.015,\r\n        openPrice: 0.4363,\r\n        price: 0.4163,\r\n        buy: 0.4363,\r\n        sell: 0.4363,\r\n        change: -0.02,\r\n        changeP: -4.584,\r\n        volume: 3,\r\n        highD: 0.4363,\r\n        lowD: 0.4363,\r\n        highY: 0.4841,\r\n        lowY: 0.3954,\r\n        startY: 0.4398,\r\n        'change On Year(%)': -5.3326\r\n    },\r\n    {\r\n        category: 'Agriculture',\r\n        type: 'Wheat',\r\n        spread: 0.01,\r\n        openPrice: 465.50,\r\n        price: 465.52,\r\n        buy: 465.50,\r\n        sell: 465.50,\r\n        change: 0.02,\r\n        changeP: 0.0043,\r\n        volume: 4318,\r\n        highD: 467.00,\r\n        lowD: 463.25,\r\n        highY: 628.50,\r\n        lowY: 449.50,\r\n        startY: 539.00,\r\n        'change On Year(%)': -13.6327\r\n    },\r\n    {\r\n        category: 'Agriculture',\r\n        type: 'Corn',\r\n        spread: 0.01,\r\n        openPrice: 379.50,\r\n        price: 379.8026,\r\n        buy: 379.7976,\r\n        sell: 379.8076,\r\n        change: 0.3026,\r\n        changeP: 0.0797,\r\n        volume: 11266,\r\n        highD: 381.00,\r\n        lowD: 377.75,\r\n        highY: 471.25,\r\n        lowY: 351.25,\r\n        startY: 411.25,\r\n        'change On Year(%)': -7.6468\r\n    },\r\n    {\r\n        category: 'Agriculture',\r\n        type: 'Sugar',\r\n        spread: 0.01,\r\n        openPrice: 15.68,\r\n        price: 14.6742,\r\n        buy: 14.6692,\r\n        sell: 14.6792,\r\n        change: -1.0058,\r\n        changeP: -6.4146,\r\n        volume: 4949,\r\n        highD: 15.70,\r\n        lowD: 14.6742,\r\n        highY: 16.87,\r\n        lowY: 11.37,\r\n        startY: 14.12,\r\n        'change On Year(%)': 3.9249\r\n    },\r\n    {\r\n        category: 'Agriculture',\r\n        type: 'Soybean',\r\n        spread: 0.01,\r\n        openPrice: 1038.00,\r\n        price: 1038.6171,\r\n        buy: 1038.6121,\r\n        sell: 1038.6221,\r\n        change: 0.6171,\r\n        changeP: 0.0595,\r\n        volume: 20356,\r\n        highD: 1044.00,\r\n        lowD: 1031.75,\r\n        highY: 1057.00,\r\n        lowY: 859.50,\r\n        startY: 958.25,\r\n        'change On Year(%)': 8.3869\r\n    },\r\n    {\r\n        category: 'Agriculture',\r\n        type: 'Soy oil',\r\n        spread: 0.01,\r\n        openPrice: 33.26,\r\n        price: 33.7712,\r\n        buy: 33.7662,\r\n        sell: 33.7762,\r\n        change: 0.5112,\r\n        changeP: 1.5371,\r\n        volume: 10592,\r\n        highD: 33.7712,\r\n        lowD: 33.06,\r\n        highY: 35.43,\r\n        lowY: 26.61,\r\n        startY: 31.02,\r\n        'change On Year(%)': 8.8692\r\n    },\r\n    {\r\n        category: 'Agriculture',\r\n        type: 'Soy Meat',\r\n        spread: 0.01,\r\n        openPrice: 342.60,\r\n        price: 342.62,\r\n        buy: 342.60,\r\n        sell: 342.60,\r\n        change: 0.02,\r\n        changeP: 0.0058,\r\n        volume: 5646,\r\n        highD: 345.40,\r\n        lowD: 340.30,\r\n        highY: 353.40,\r\n        lowY: 261.70,\r\n        startY: 307.55,\r\n        'change On Year(%)': 11.403\r\n    },\r\n    {\r\n        category: 'Agriculture',\r\n        type: 'OJ Future',\r\n        spread: 0.01,\r\n        openPrice: 140.60,\r\n        price: 140.1893,\r\n        buy: 140.1843,\r\n        sell: 140.1943,\r\n        change: -0.4107,\r\n        changeP: -0.2921,\r\n        volume: 7,\r\n        highD: 140.1893,\r\n        lowD: 0.00,\r\n        highY: 155.95,\r\n        lowY: 113.00,\r\n        startY: 134.475,\r\n        'change On Year(%)': 4.2493\r\n    },\r\n    {\r\n        category: 'Agriculture',\r\n        type: 'Coffee',\r\n        spread: 0.01,\r\n        openPrice: 125.70,\r\n        price: 125.69,\r\n        buy: 125.70,\r\n        sell: 125.70,\r\n        change: -0.01,\r\n        changeP: -0.008,\r\n        volume: 1654,\r\n        highD: 125.80,\r\n        lowD: 125.00,\r\n        highY: 155.75,\r\n        lowY: 115.35,\r\n        startY: 135.55,\r\n        'change On Year(%)': -7.2741\r\n    },\r\n    {\r\n        category: 'Agriculture',\r\n        type: 'Cocoa',\r\n        spread: 0.01,\r\n        openPrice: 3076.00,\r\n        price: 3076.03,\r\n        buy: 3076.00,\r\n        sell: 3076.00,\r\n        change: 0.03,\r\n        changeP: 0.001,\r\n        volume: 978,\r\n        highD: 3078.00,\r\n        lowD: 3066.00,\r\n        highY: 3406.00,\r\n        lowY: 2746.00,\r\n        startY: 3076.00,\r\n        'change On Year(%)': 0.001\r\n    },\r\n    {\r\n        category: 'Agriculture',\r\n        type: 'Rice',\r\n        spread: 0.01,\r\n        openPrice: 11.245,\r\n        price: 10.4154,\r\n        buy: 10.4104,\r\n        sell: 10.4204,\r\n        change: -0.8296,\r\n        changeP: -7.3779,\r\n        volume: 220,\r\n        highD: 11.38,\r\n        lowD: 10.4154,\r\n        highY: 14.14,\r\n        lowY: 9.70,\r\n        startY: 11.92,\r\n        'change On Year(%)': -12.6228\r\n    },\r\n    {\r\n        category: 'Agriculture',\r\n        type: 'Oats',\r\n        spread: 0.01,\r\n        openPrice: 194.50,\r\n        price: 194.2178,\r\n        buy: 194.2128,\r\n        sell: 194.2228,\r\n        change: -0.2822,\r\n        changeP: -0.1451,\r\n        volume: 64,\r\n        highD: 195.75,\r\n        lowD: 194.00,\r\n        highY: 241.25,\r\n        lowY: 183.75,\r\n        startY: 212.50,\r\n        'change On Year(%)': -8.6034\r\n    },\r\n    {\r\n        category: 'Agriculture',\r\n        type: 'Milk',\r\n        spread: 0.01,\r\n        openPrice: 12.87,\r\n        price: 12.86,\r\n        buy: 12.87,\r\n        sell: 12.87,\r\n        change: -0.01,\r\n        changeP: -0.0777,\r\n        volume: 7,\r\n        highD: 12.89,\r\n        lowD: 12.81,\r\n        highY: 16.96,\r\n        lowY: 12.81,\r\n        startY: 14.885,\r\n        'change On Year(%)': -13.6043\r\n    },\r\n    {\r\n        category: 'Agriculture',\r\n        type: 'Cotton',\r\n        spread: 0.01,\r\n        openPrice: 61.77,\r\n        price: 61.76,\r\n        buy: 61.77,\r\n        sell: 61.77,\r\n        change: -0.01,\r\n        changeP: -0.0162,\r\n        volume: 3612,\r\n        highD: 62.06,\r\n        lowD: 61.32,\r\n        highY: 67.59,\r\n        lowY: 54.33,\r\n        startY: 60.96,\r\n        'change On Year(%)': 1.3123\r\n    },\r\n    {\r\n        category: 'Agriculture',\r\n        type: 'Lumber',\r\n        spread: 0.01,\r\n        openPrice: 303.90,\r\n        price: 304.5994,\r\n        buy: 304.5944,\r\n        sell: 304.6044,\r\n        change: 0.6994,\r\n        changeP: 0.2302,\r\n        volume: 2,\r\n        highD: 304.5994,\r\n        lowD: 303.90,\r\n        highY: 317.10,\r\n        lowY: 236.00,\r\n        startY: 276.55,\r\n        'change On Year(%)': 10.1426\r\n    },\r\n    {\r\n        category: 'Livestock',\r\n        type: 'LV Cattle',\r\n        spread: 0.01,\r\n        openPrice: 120.725,\r\n        price: 120.705,\r\n        buy: 120.725,\r\n        sell: 120.725,\r\n        change: -0.02,\r\n        changeP: -0.0166,\r\n        volume: 4,\r\n        highD: 120.725,\r\n        lowD: 120.725,\r\n        highY: 147.98,\r\n        lowY: 113.90,\r\n        startY: 130.94,\r\n        'change On Year(%)': -7.8166\r\n    },\r\n    {\r\n        category: 'Livestock',\r\n        type: 'FD Cattle',\r\n        spread: 0.01,\r\n        openPrice: 147.175,\r\n        price: 148.6065,\r\n        buy: 148.6015,\r\n        sell: 148.6115,\r\n        change: 1.4315,\r\n        changeP: 0.9727,\r\n        volume: 5,\r\n        highD: 148.6065,\r\n        lowD: 147.175,\r\n        highY: 190.00,\r\n        lowY: 138.10,\r\n        startY: 164.05,\r\n        'change On Year(%)': -9.4139\r\n    },\r\n    {\r\n        category: 'Livestock',\r\n        type: 'Lean Hogs',\r\n        spread: 0.01,\r\n        openPrice: 81.275,\r\n        price: 81.8146,\r\n        buy: 81.8096,\r\n        sell: 81.8196,\r\n        change: 0.5396,\r\n        changeP: 0.664,\r\n        volume: 1,\r\n        highD: 81.8146,\r\n        lowD: 81.275,\r\n        highY: 83.98,\r\n        lowY: 70.25,\r\n        startY: 77.115,\r\n        'change On Year(%)': 6.0943\r\n    },\r\n    {\r\n        category: 'Currencies',\r\n        type: 'USD IDX Future',\r\n        spread: 0.02,\r\n        openPrice: 93.88,\r\n        price: 93.7719,\r\n        buy: 93.7619,\r\n        sell: 93.7819,\r\n        change: -0.1081,\r\n        changeP: -0.1151,\r\n        volume: 5788,\r\n        highD: 94.05,\r\n        lowD: 93.7534,\r\n        highY: 100.70,\r\n        lowY: 91.88,\r\n        startY: 96.29,\r\n        'change On Year(%)': -2.6151\r\n    },\r\n    {\r\n        category: 'Currencies',\r\n        type: 'USD/JPY Future',\r\n        spread: 0.02,\r\n        openPrice: 9275.50,\r\n        price: 9277.3342,\r\n        buy: 9277.3242,\r\n        sell: 9277.3442,\r\n        change: 1.8342,\r\n        changeP: 0.0198,\r\n        volume: 47734,\r\n        highD: 9277.3342,\r\n        lowD: 0.93,\r\n        highY: 9483.00,\r\n        lowY: 0.93,\r\n        startY: 4741.965,\r\n        'change On Year(%)': 95.6432\r\n    },\r\n    {\r\n        category: 'Currencies',\r\n        type: 'GBP/USD Future',\r\n        spread: 0.02,\r\n        openPrice: 1.4464,\r\n        price: 1.1941,\r\n        buy: 1.1841,\r\n        sell: 1.2041,\r\n        change: -0.2523,\r\n        changeP: -17.4441,\r\n        volume: 29450,\r\n        highD: 1.45,\r\n        lowD: 1.1941,\r\n        highY: 1.59,\r\n        lowY: 1.1941,\r\n        startY: 1.485,\r\n        'change On Year(%)': -19.59\r\n    },\r\n    {\r\n        category: 'Currencies',\r\n        type: 'AUD/USD Future',\r\n        spread: 0.02,\r\n        openPrice: 0.7344,\r\n        price: 0.7444,\r\n        buy: 0.7344,\r\n        sell: 0.7344,\r\n        change: 0.01,\r\n        changeP: 1.3617,\r\n        volume: 36764,\r\n        highD: 0.74,\r\n        lowD: 0.73,\r\n        highY: 0.79,\r\n        lowY: 0.68,\r\n        startY: 0.735,\r\n        'change On Year(%)': 1.2789\r\n    },\r\n    {\r\n        category: 'Currencies',\r\n        type: 'USD/CAD Future',\r\n        spread: 0.02,\r\n        openPrice: 0.7744,\r\n        price: 0.9545,\r\n        buy: 0.9445,\r\n        sell: 0.9645,\r\n        change: 0.1801,\r\n        changeP: 23.2622,\r\n        volume: 13669,\r\n        highD: 0.9545,\r\n        lowD: 0.77,\r\n        highY: 0.9545,\r\n        lowY: 0.68,\r\n        startY: 0.755,\r\n        'change On Year(%)': 26.4295\r\n    },\r\n    {\r\n        category: 'Currencies',\r\n        type: 'USD/CHF Future',\r\n        spread: 0.02,\r\n        openPrice: 1.0337,\r\n        price: 1.0437,\r\n        buy: 1.0337,\r\n        sell: 1.0337,\r\n        change: 0.01,\r\n        changeP: 0.9674,\r\n        volume: 5550,\r\n        highD: 1.03,\r\n        lowD: 1.03,\r\n        highY: 1.11,\r\n        lowY: 0.98,\r\n        startY: 1.045,\r\n        'change On Year(%)': -0.1244\r\n    },\r\n    {\r\n        category: 'Index',\r\n        type: 'DOW Future',\r\n        spread: 0.01,\r\n        openPrice: 17711.00,\r\n        price: 17712.1515,\r\n        buy: 17712.1465,\r\n        sell: 17712.1565,\r\n        change: 1.1515,\r\n        changeP: 0.0065,\r\n        volume: 22236,\r\n        highD: 17727.00,\r\n        lowD: 17642.00,\r\n        highY: 18083.00,\r\n        lowY: 15299.00,\r\n        startY: 16691.00,\r\n        'change On Year(%)': 6.118\r\n    },\r\n    {\r\n        category: 'Index',\r\n        type: 'S&P Future',\r\n        spread: 0.01,\r\n        openPrice: 2057.50,\r\n        price: 2056.6018,\r\n        buy: 2056.5968,\r\n        sell: 2056.6068,\r\n        change: -0.8982,\r\n        changeP: -0.0437,\r\n        volume: 142780,\r\n        highD: 2059.50,\r\n        lowD: 2049.00,\r\n        highY: 2105.50,\r\n        lowY: 1794.50,\r\n        startY: 1950.00,\r\n        'change On Year(%)': 5.4668\r\n    },\r\n    {\r\n        category: 'Index',\r\n        type: 'NAS Future',\r\n        spread: 0.01,\r\n        openPrice: 4341.25,\r\n        price: 4341.28,\r\n        buy: 4341.25,\r\n        sell: 4341.25,\r\n        change: 0.03,\r\n        changeP: 0.0007,\r\n        volume: 18259,\r\n        highD: 4347.00,\r\n        lowD: 4318.00,\r\n        highY: 4719.75,\r\n        lowY: 3867.75,\r\n        startY: 4293.75,\r\n        'change On Year(%)': 1.107\r\n    },\r\n    {\r\n        category: 'Index',\r\n        type: 'S&P MID MINI',\r\n        spread: 0.01,\r\n        openPrice: 1454.30,\r\n        price: 1455.7812,\r\n        buy: 1455.7762,\r\n        sell: 1455.7862,\r\n        change: 1.4812,\r\n        changeP: 0.1018,\r\n        volume: 338,\r\n        highD: 1455.7812,\r\n        lowD: 1448.00,\r\n        highY: 1527.30,\r\n        lowY: 1236.00,\r\n        startY: 1381.65,\r\n        'change On Year(%)': 5.3654\r\n    },\r\n    {\r\n        category: 'Index',\r\n        type: 'S&P 600 MINI',\r\n        spread: 0.01,\r\n        openPrice: 687.90,\r\n        price: 687.88,\r\n        buy: 687.90,\r\n        sell: 687.90,\r\n        change: -0.02,\r\n        changeP: -0.0029,\r\n        volume: 0,\r\n        highD: 0.00,\r\n        lowD: 0.00,\r\n        highY: 620.32,\r\n        lowY: 595.90,\r\n        startY: 608.11,\r\n        'change On Year(%)': 13.1177\r\n    },\r\n    {\r\n        category: 'Interest Rate',\r\n        type: 'US 30YR Future',\r\n        spread: 0.01,\r\n        openPrice: 164.875,\r\n        price: 164.1582,\r\n        buy: 164.1532,\r\n        sell: 164.1632,\r\n        change: -0.7168,\r\n        changeP: -0.4347,\r\n        volume: 28012,\r\n        highD: 165.25,\r\n        lowD: 164.0385,\r\n        highY: 169.38,\r\n        lowY: 151.47,\r\n        startY: 160.425,\r\n        'change On Year(%)': 2.3271\r\n    },\r\n    {\r\n        category: 'Interest Rate',\r\n        type: 'US 2Y Future',\r\n        spread: 0.01,\r\n        openPrice: 109.3984,\r\n        price: 109.3884,\r\n        buy: 109.3984,\r\n        sell: 109.3984,\r\n        change: -0.01,\r\n        changeP: -0.0091,\r\n        volume: 17742,\r\n        highD: 109.41,\r\n        lowD: 109.38,\r\n        highY: 109.80,\r\n        lowY: 108.62,\r\n        startY: 109.21,\r\n        'change On Year(%)': 0.1634\r\n    },\r\n    {\r\n        category: 'Interest Rate',\r\n        type: 'US 10YR Future',\r\n        spread: 0.01,\r\n        openPrice: 130.5625,\r\n        price: 130.5825,\r\n        buy: 130.5625,\r\n        sell: 130.5625,\r\n        change: 0.02,\r\n        changeP: 0.0153,\r\n        volume: 189310,\r\n        highD: 130.63,\r\n        lowD: 130.44,\r\n        highY: 132.64,\r\n        lowY: 125.48,\r\n        startY: 129.06,\r\n        'change On Year(%)': 1.1797\r\n    },\r\n    {\r\n        category: 'Interest Rate',\r\n        type: 'Euro$ 3M',\r\n        spread: 0.01,\r\n        openPrice: 99.18,\r\n        price: 99.17,\r\n        buy: 99.18,\r\n        sell: 99.18,\r\n        change: -0.01,\r\n        changeP: -0.0101,\r\n        volume: 29509,\r\n        highD: 99.18,\r\n        lowD: 99.17,\r\n        highY: 99.38,\r\n        lowY: 98.41,\r\n        startY: 98.895,\r\n        'change On Year(%)': 0.2781\r\n    }\r\n];\r\nexport class FinancialData {\r\n    public static generateData(count: number): Stock[] {\r\n        const currData: Stock[] = [];\r\n        for (let i = 0; i < count; i++) {\r\n            const rand = Math.floor(Math.random() * Math.floor(DATA.length));\r\n            const dataObj: Stock = Object.assign({}, DATA[rand]);\r\n\r\n            dataObj.settlement = Settlement[this.generateRandomNumber(0, 1)];\r\n            dataObj.contract = Contract[this.generateRandomNumber(0, 4)];\r\n            dataObj.lastUpdated = this.randomizeDate();\r\n            dataObj.openPriceDiff = (((dataObj['openPrice'] - dataObj['price']) / dataObj['price']) * 100) * 150;\r\n            dataObj.buyDiff = (((dataObj.buy - dataObj.price) / dataObj.price) * 100) * 150;\r\n            dataObj.sellDiff = (((dataObj.sell - dataObj.price) / dataObj.price) * 100) * 150;\r\n            dataObj.startYDiff = (((dataObj.startY - dataObj.price) / dataObj.price) * 100) * 150;\r\n            dataObj.highYDiff = (((dataObj.highY - dataObj.price) / dataObj.price) * 100) * 150;\r\n            dataObj.lowYDiff = (((dataObj.lowY - dataObj.price) / dataObj.price) * 100) * 150;\r\n            dataObj.highDDiff = (((dataObj.highD - dataObj.price) / dataObj.price) * 100) * 150;\r\n            dataObj.lowDDiff = (((dataObj.lowD - dataObj.price) / dataObj.price) * 100) * 150;\r\n\r\n            const region: Region = REGIONS[this.generateRandomNumber(0, 5)];\r\n            dataObj.region = region.Name;\r\n            dataObj.country = this.randomizeCountry(region).Name;\r\n\r\n            for (const mockData of MOCKFINANCEDATA) {\r\n                Object.assign(dataObj, mockData);\r\n            }\r\n\r\n            dataObj.id = i;\r\n            this.randomizeObjectData(dataObj);\r\n            currData.push(dataObj);\r\n        }\r\n        return currData;\r\n    }\r\n\r\n    public static generateHierarchicalData(count: number): Stock[] {\r\n        const currData = [];\r\n        for (let i = 0; i < DATA.length; i++) {\r\n            DATA[i].id = 10 + i;\r\n        }\r\n\r\n        for (let i = 0; i < Contract.length; i++) {\r\n            const rand = Math.floor(Math.random() * Math.floor(DATA.length));\r\n            const dataObj = Object.assign({}, DATA[rand]);\r\n            dataObj.category = Contract[i];\r\n            dataObj.categories = [];\r\n            dataObj.id = i * count;\r\n\r\n            // add second level of hierarchical data\r\n            const childData = this.addHierarchicalData(count / 4, i, dataObj.id);\r\n            for (const childDataObj of childData) {\r\n                childDataObj.categories = this.addHierarchicalData(childData.length / 4, i, childDataObj.id, 4);\r\n            }\r\n\r\n            // add level of hierarchical data\r\n            dataObj.categories = childData;\r\n\r\n            this.addMockData(dataObj);\r\n            currData.push(dataObj);\r\n        }\r\n\r\n        return currData;\r\n    }\r\n\r\n    public static updateAllPrices(data: Stock[]): Stock[] {\r\n        for (const dataRow of data) {\r\n            this.randomizeObjectData(dataRow);\r\n        }\r\n        return Array.from(data);\r\n    }\r\n\r\n    public static updateRandomPrices(data: Stock[]): Stock[] {\r\n        const currData = data.slice(0, data.length + 1);\r\n        for (let i = 0; i < 30; i++) {\r\n            const random = Math.round(Math.random() * data.length);\r\n            const dataObj = Object.assign({}, data[random]);\r\n            this.randomizeObjectData(dataObj);\r\n            currData[random] = dataObj;\r\n        }\r\n        // return {data: currData, recordsUpdated: y };\r\n        return currData;\r\n    }\r\n\r\n    private static addMockData(dataObj: Stock): void {\r\n        for (const mockData of MOCKFINANCEDATA) {\r\n            Object.assign(dataObj, mockData);\r\n        }\r\n    }\r\n\r\n    private static addHierarchicalData(count: number, i: number, parentRowId: number, toAdd?: number): Stock[] {\r\n        const childData: Stock[] = [];\r\n        const numberToAdd = toAdd ?? Math.round(count / Contract.length);\r\n        for (let y = 0; y < numberToAdd; y++) {\r\n            const rand = Math.floor(Math.random() * Math.floor(DATA.length));\r\n            const childDataObj = Object.assign({}, DATA[rand]);\r\n            childDataObj.id = parentRowId * 10 + y + 1;\r\n            this.randomizeObjectData(childDataObj);\r\n            this.addMockData(childDataObj);\r\n            childData.push(childDataObj);\r\n        }\r\n        return childData;\r\n    }\r\n\r\n    private static randomizeObjectData(dataObj: Stock): void {\r\n        const res = this.generateNewPrice(dataObj.price);\r\n        dataObj.change = res.price - dataObj.price;\r\n        dataObj.price = res.price;\r\n        dataObj.changeP = res.changePercent;\r\n    }\r\n\r\n    private static generateNewPrice(oldPrice: number): { price: number; changePercent: number } {\r\n        const rnd = parseFloat(Math.random().toFixed(2));\r\n        const volatility = 2;\r\n        let newPrice = 0;\r\n\r\n        let changePercent = 2 * volatility * rnd;\r\n        if (changePercent > volatility) {\r\n            changePercent -= (2 * volatility);\r\n        }\r\n\r\n        const changeAmount = oldPrice * (changePercent / 100);\r\n        newPrice = oldPrice + changeAmount;\r\n\r\n        const result = { price: 0, changePercent: 0 };\r\n        result.price = parseFloat(newPrice.toFixed(2));\r\n        result.changePercent = parseFloat(changePercent.toFixed(2));\r\n\r\n        return result;\r\n    }\r\n\r\n    private static generateRandomNumber(min: number, max: number): number {\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    }\r\n\r\n    private static randomizeCountry(region: Region): Country {\r\n        let country!: Country;\r\n        switch (region.Name) {\r\n            case 'North America': {\r\n                country = region.Countries[this.generateRandomNumber(0, 2)];\r\n                break;\r\n            }\r\n            case 'South America': {\r\n                country = region.Countries[this.generateRandomNumber(0, 11)];\r\n                break;\r\n            }\r\n            case 'Europe': {\r\n                country = region.Countries[this.generateRandomNumber(0, 26)];\r\n                break;\r\n            }\r\n            case 'Asia Pacific': {\r\n                country = region.Countries[this.generateRandomNumber(0, 15)];\r\n                break;\r\n            }\r\n            case 'Africa': {\r\n                country = region.Countries[this.generateRandomNumber(0, 10)];\r\n                break;\r\n            }\r\n            case 'Middle East': {\r\n                country = region.Countries[this.generateRandomNumber(0, 12)];\r\n                break;\r\n            }\r\n        }\r\n        return country;\r\n    }\r\n\r\n    private static randomizeDate(): Date {\r\n        const date = new Date();\r\n        date.setHours(this.generateRandomNumber(0, 23));\r\n        date.setMonth(this.generateRandomNumber(0, date.getMonth()));\r\n        date.setDate(this.generateRandomNumber(0, 23));\r\n        return date;\r\n    }\r\n}\r\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/services/floating-panes.service.ts","content":"/* eslint-disable max-len */\r\nimport { Injectable } from '@angular/core';\r\nimport { IgcDockManagerPoint, IgcSplitPane } from 'igniteui-dockmanager';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FloatingPanesService {\r\n\r\n  public set initialPanePosition(point: IgcDockManagerPoint) {\r\n    this._initialPanePosition = point;\r\n  }\r\n\r\n  public get initialPanePosition() {\r\n      return this._initialPanePosition;\r\n  }\r\n\r\n  public floatingPanes: IgcSplitPane[] = [];\r\n\r\n  private _initialPanePosition: IgcDockManagerPoint;\r\n  constructor() { }\r\n\r\n  public appendPane(pane: IgcSplitPane) {\r\n\r\n        if (this.floatingPanes.length) {\r\n            const lastPane = this.floatingPanes[this.floatingPanes.length - 1];\r\n            pane.floatingLocation = {x: lastPane.floatingLocation.x + 10, y: lastPane.floatingLocation.y + 10}  ;\r\n        } else {\r\n            pane.floatingLocation = this.initialPanePosition;\r\n        }\r\n        this.floatingPanes.push(pane);\r\n\r\n  }\r\n\r\n  public removePane(pane: IgcSplitPane) {\r\n    const index = this.floatingPanes.indexOf(this.floatingPanes.find(p => p.id === pane.id));\r\n    this.floatingPanes.splice(index, index + 1);\r\n  }\r\n\r\n}\r\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/grid-finjs-dock-manager/dock-slot.component.ts","content":"// eslint-disable-next-line max-len\r\nimport { AfterViewInit, Component, Directive, EventEmitter, HostBinding, Input, OnInit, OnDestroy, Output, ViewChild, ViewContainerRef } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\n@Directive({\r\n    // eslint-disable-next-line @angular-eslint/directive-selector\r\n    selector: '[gridHost]'\r\n})\r\nexport class GridHostDirective {\r\n    constructor(public viewContainerRef: ViewContainerRef) { }\r\n}\r\n\r\n@Component({\r\n    selector: 'app-dock-slot',\r\n    template: `\r\n    <div style='width: 100%; height: 100%; overflow-x: hidden;'>\r\n        <ng-template gridHost></ng-template>\r\n    </div>`\r\n})\r\nexport class DockSlotComponent implements OnInit, AfterViewInit, OnDestroy {\r\n    @Output()\r\n    public viewInit = new EventEmitter();\r\n\r\n    @ViewChild(GridHostDirective)\r\n    public gridHost: GridHostDirective;\r\n\r\n    @Input()\r\n    public id;\r\n\r\n    @HostBinding('slot')\r\n    public slot;\r\n\r\n    public destroy$ = new Subject<any>();\r\n\r\n    constructor() { }\r\n\r\n    public ngOnInit(): void {\r\n        this.slot = this.id;\r\n    }\r\n\r\n    public ngAfterViewInit() {\r\n        this.viewInit.emit();\r\n    }\r\n    public ngOnDestroy() {\r\n        this.destroy$.next(true);\r\n        this.destroy$.complete();\r\n    }\r\n}\r\n"},{"hasRelativeAssetsUrls":false,"path":"src/_app-layout.scss","content":".sample-wrapper {\r\n    width: inherit;\r\n    position: relative;\r\n    height: 100%;\r\n    margin: 0 auto;\r\n    background: transparent;\r\n}\r\n\r\n.sample-content {\r\n    display: flex;\r\n    flex-grow: 1;\r\n    flex-flow: row wrap;\r\n    justify-content: flex-start;\r\n    padding: 0;\r\n    -webkit-animation: fade-in .3s cubic-bezier(0.390, 0.575, 0.565, 1.000) both;\r\n    -moz-animation: fade-in .3s cubic-bezier(0.390, 0.575, 0.565, 1.000) both;\r\n    animation: fade-in .3s cubic-bezier(0.390, 0.575, 0.565, 1.000) both;\r\n}\r\n\r\n.sample-column {\r\n    display: flex;\r\n    flex-flow: column nowrap;\r\n    flex: 1 0 25%;\r\n    align-content: flex-start;\r\n    margin: 16px;\r\n    min-width: 280px;\r\n}\r\n\r\n.sample-title {\r\n    color: #0375be;\r\n    margin-bottom: 12px;\r\n    margin-top: 12px;\r\n}\r\n\r\n.sample-title .light {\r\n    font-weight: 400;\r\n}\r\n\r\n.sample-description {\r\n    font-size: 14px;\r\n    font-weight: normal;\r\n    color: #717171;\r\n}\r\n\r\n@-webkit-keyframes color-change-2x {\r\n    0% {\r\n        background: #fdf8f0;\r\n    }\r\n    100% {\r\n        background: #f6e7ec;\r\n    }\r\n}\r\n\r\n@keyframes color-change-2x {\r\n    0% {\r\n        background: #fdf8f0;\r\n    }\r\n    100% {\r\n        background: #f6e7ec;\r\n    }\r\n}\r\n\r\n@-webkit-keyframes fade-in {\r\n    0% {\r\n        opacity: 0;\r\n    }\r\n    100% {\r\n        opacity: 1;\r\n    }\r\n}\r\n\r\n@keyframes fade-in {\r\n    0% {\r\n        opacity: 0;\r\n    }\r\n    100% {\r\n        opacity: 1;\r\n    }\r\n}\r\n\r\n.headerAlignSyle {\r\n    text-align: right !important;\r\n}\r\n\r\n"},{"hasRelativeAssetsUrls":false,"path":"src/_variables.scss","content":"@use 'igniteui-angular/theming' as *;\r\n@forward 'igniteui-angular/theming';\r\n\r\n$legacy-support: true;\r\n$palette: $light-material-palette;\r\n$schema: $light-material-schema;\r\n\r\n$default-palette: $palette;\r\n$igx-legacy-support: $legacy-support;\r\n\r\n$green-palette: palette(\r\n    $primary: #09f,\r\n    $secondary: #72da67,\r\n    $grays: #fff,\r\n    $surface: #333\r\n);\r\n\r\n$grays-btn-color: color($green-palette, 'grays', 800);\r\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.module.ts","content":"import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { AppComponent } from \"./app.component\";\r\nimport { IgxPreventDocumentScrollModule } from \"./directives/prevent-scroll.directive\";\r\nimport { IgxCategoryChartModule } from \"igniteui-angular-charts\";\r\nimport { \r\n\tIgxGridModule,\r\n\tIgxButtonGroupModule,\r\n\tIgxIconModule,\r\n\tIgxSliderModule,\r\n\tIgxToggleModule,\r\n\tIgxButtonModule,\r\n\tIgxExcelExporterService,\r\n\tIgxCsvExporterService,\r\n\tIgxSwitchModule,\r\n\tIgxRippleModule,\r\n\tIgxDialogModule,\r\n\tIgxToastModule,\r\n\tIgxGridComponent\r\n } from \"igniteui-angular\";\r\nimport { GridFinJSDockManagerComponent } from \"./grid-finjs-dock-manager/grid-finjs-dock-manager.component\";\r\nimport { HttpClientModule } from \"@angular/common/http\";\r\nimport { SignalRService } from \"./services/signal-r.service\";\r\nimport { CUSTOM_ELEMENTS_SCHEMA } from \"@angular/core\";\r\nimport { FloatingPanesService } from \"./services/floating-panes.service\";\r\nimport { \r\n\tDockSlotComponent,\r\n\tGridHostDirective\r\n } from \"./grid-finjs-dock-manager/dock-slot.component\";\n\nimport { defineCustomElements } from 'igniteui-dockmanager/loader';\ndefineCustomElements();\n\n\n@NgModule({\n  bootstrap: [AppComponent],\n  declarations: [\r\n\tAppComponent,\r\n\tGridFinJSDockManagerComponent,\r\n\tDockSlotComponent,\r\n\tGridHostDirective\r\n],\n  imports: [\r\n\tBrowserModule,\r\n\tBrowserAnimationsModule,\r\n\tFormsModule,\r\n\tIgxPreventDocumentScrollModule,\r\n\tIgxGridModule,\r\n\tIgxButtonGroupModule,\r\n\tIgxIconModule,\r\n\tIgxSliderModule,\r\n\tIgxToggleModule,\r\n\tIgxButtonModule,\r\n\tIgxSwitchModule,\r\n\tIgxRippleModule,\r\n\tIgxCategoryChartModule,\r\n\tIgxDialogModule,\r\n\tIgxToastModule,\r\n\tHttpClientModule\r\n],\n  providers: [\r\n\tIgxExcelExporterService,\r\n\tIgxCsvExporterService,\r\n\tSignalRService,\r\n\tFloatingPanesService\r\n],\n  entryComponents: [\r\n\tIgxGridComponent,\r\n\tDockSlotComponent\r\n],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class AppModule {}\n","isMain":true,"fileExtension":"ts","fileHeader":"modules"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.component.html","content":"<app-finjs-dock-manager></app-finjs-dock-manager>"},{"hasRelativeAssetsUrls":false,"path":"package.json","content":"{\n  \"name\": \"example-app\",\n  \"version\": \"0.0.0\",\n  \"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"ng serve\",\n    \"build\": \"ng build\",\n    \"watch\": \"ng build --watch --configuration development\",\n    \"test\": \"ng test\"\n  },\n  \"private\": true,\n  \"dependencies\": {\n    \"@angular/animations\": \"^14.1.0\",\n    \"@angular/cdk\": \"^14.0.0\",\n    \"@angular/common\": \"^14.1.0\",\n    \"@angular/compiler\": \"^14.1.0\",\n    \"@angular/core\": \"^14.1.0\",\n    \"@angular/forms\": \"^14.1.0\",\n    \"@angular/platform-browser\": \"^14.1.0\",\n    \"@angular/platform-browser-dynamic\": \"^14.1.0\",\n    \"@angular/router\": \"^14.1.0\",    \"@types/hammerjs\": \"^2.0.39\",\n    \"@microsoft/signalr\": \"^5.0.11\",\n    \"core-js\": \"2.6.2\",\n    \"hammerjs\": \"^2.0.8\",\n    \"igniteui-angular\": \"^14.2.0\",\n    \"igniteui-angular-charts\": \"^14.0.0\",\n    \"igniteui-angular-core\": \"^14.0.0\",    \"igniteui-dockmanager\": \"^1.11.0\",\n    \"immediate\": \"^3.2.3\",\n    \"intl\": \"^1.2.5\",\n    \"rxjs\": \"^6.6.7\",\n    \"tslib\": \"^2.3.1\",\n    \"zone.js\": \"~0.11.4\"\n  },\n  \"devDependencies\": {\n    \"@angular-devkit/build-angular\": \"^14.0.0\",\n    \"@angular/cli\": \"^14.0.0\",\n    \"@angular/compiler-cli\": \"^14.1.0\",\n    \"@types/jasmine\": \"~3.10.0\",\n    \"@types/node\": \"^12.11.1\",\n    \"jasmine-core\": \"~3.10.0\",\n    \"karma\": \"~6.3.0\",\n    \"karma-chrome-launcher\": \"~3.1.0\",\n    \"karma-coverage\": \"~2.0.3\",\n    \"karma-jasmine\": \"~4.0.0\",\n    \"karma-jasmine-html-reporter\": \"~1.7.0\",\n    \"typescript\": \"~4.7.3\"\n  }\n}\n"}],"sampleDependencies":"{\"@angular/animations\":\"^14.1.0\",\"@angular/common\":\"^14.1.0\",\"@angular/compiler\":\"^14.1.0\",\"@angular/core\":\"^14.1.0\",\"@angular/forms\":\"^14.1.0\",\"@angular/platform-browser\":\"^14.1.0\",\"@angular/platform-browser-dynamic\":\"^14.1.0\",\"@angular/router\":\"^14.1.0\",\"@microsoft/signalr\":\"^5.0.11\",\"@types/hammerjs\":\"^2.0.39\",\"core-js\":\"2.6.2\",\"hammerjs\":\"^2.0.8\",\"igniteui-angular\":\"14.2.0\",\"igniteui-angular-charts\":\"14.0.0\",\"igniteui-angular-core\":\"14.0.0\",\"igniteui-dockmanager\":\"^1.8.0\",\"immediate\":\"^3.2.3\",\"intl\":\"^1.2.5\",\"rxjs\":\"^6.6.7\",\"tslib\":\"^2.3.1\",\"zone.js\":\"~0.11.4\"}"}