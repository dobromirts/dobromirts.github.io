{"addTsConfig":false,"sampleFiles":[{"hasRelativeAssetsUrls":false,"path":"src/app/grid-finjs/main.component.ts","content":"import { Component, HostBinding, OnDestroy, ViewChild } from '@angular/core';\r\nimport { IgxDialogComponent } from 'igniteui-angular';\r\nimport { IgxCategoryChartComponent } from 'igniteui-angular-charts';\r\nimport { Stock } from '../data/financialData';\r\nimport { ControllerComponent } from './controllers.component';\r\nimport { GridFinJSComponent } from './grid-finjs.component';\r\n\r\n@Component({\r\n    selector: 'app-finjs-main',\r\n    styleUrls: ['./main.component.scss'],\r\n    templateUrl: './main.component.html'\r\n})\r\nexport class FinJSDemoComponent implements OnDestroy {\r\n    @ViewChild('finGrid', { static: true }) public finGrid: GridFinJSComponent;\r\n    @ViewChild('controllers', { static: true }) public controller: ControllerComponent;\r\n    @ViewChild('dialog', { static: true }) public dialog: IgxDialogComponent;\r\n    @ViewChild('chart1', { static: true }) public chart: IgxCategoryChartComponent;\r\n\r\n    @HostBinding('class.dark-theme')\r\n    public darkTheme = false;\r\n\r\n    public properties = ['price', 'country'];\r\n    public chartData: Stock[] = [];\r\n    public volume = 1000;\r\n    public frequency = 500;\r\n    private _timer: ReturnType<typeof setInterval>;\r\n\r\n    public onSwitchChanged(event: { action: string; value: boolean }): void {\r\n        switch (event.action) {\r\n            case 'toolbar': {\r\n                this.finGrid.showToolbar = event.value;\r\n                break;\r\n            }\r\n            case 'grouped': {\r\n                this.finGrid.toggleGrouping();\r\n                break;\r\n            }\r\n            case 'theme': {\r\n                this.darkTheme = event.value;\r\n                break;\r\n            }\r\n            default: break;\r\n        }\r\n    }\r\n\r\n    public onVolumeChanged(volume: number): void {\r\n        this.volume = volume;\r\n        this.finGrid.dataService.hasRemoteConnection ? this.finGrid.dataService\r\n            .broadcastParams(this.controller.frequency, this.volume, false) : this.finGrid.dataService.getData(volume);\r\n    }\r\n\r\n    public onFrequencyChanged(frequency: number): void {\r\n        this.frequency = frequency;\r\n    }\r\n\r\n    public onPlayAction(event: { action: string }): void {\r\n        switch (event.action) {\r\n            case 'playAll': {\r\n                if (this.finGrid.dataService.hasRemoteConnection) {\r\n                    this.finGrid.dataService.broadcastParams(this.frequency, this.volume, true);\r\n                } else {\r\n                    const currData: Stock[] = this.finGrid.grid.filteredSortedData ?? this.finGrid.grid.data;\r\n                    this._timer = setInterval(() => this.finGrid.dataService.updateAllPriceValues(currData), this.controller.frequency);\r\n                }\r\n                break;\r\n            }\r\n            case 'stop': {\r\n                this.finGrid.dataService.hasRemoteConnection ? this.finGrid.dataService.stopLiveData() : this.stopFeed();\r\n                break;\r\n            }\r\n            case 'chart': {\r\n                if (this.finGrid.grid.selectedRows.length !== 0) {\r\n                    this.setChartData(this.finGrid.grid.selectedRows);\r\n                    this.dialog.open();\r\n                } else {\r\n                    this.controller.toast.open('Please select some rows first!');\r\n                };\r\n                break;\r\n            }\r\n            default: {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public setChartData(args: Stock[]): void {\r\n        this.chartData = [];\r\n        args.forEach(row => {\r\n            this.chartData.push(row);\r\n            this.chart.notifyInsertItem(this.chartData, this.chartData.length - 1, row);\r\n        });\r\n        // this.controller.controls[2].disabled = this.chartData.length === 0;\r\n        this.setLabelIntervalAndAngle();\r\n        this.setChartConfig('Countries', 'Prices (USD)', 'Data Chart with prices by Category and Country');\r\n    }\r\n\r\n    public onCloseHandler(): void {\r\n        if (this.finGrid.grid.navigation.activeNode) {\r\n            if (this.finGrid.grid.navigation.activeNode.row === -1) {\r\n                this.finGrid.grid.theadRow.nativeElement.focus();\r\n            } else {\r\n                this.finGrid.grid.tbody.nativeElement.focus();\r\n            }\r\n            this.controller.playButtons.deselectButton(2);\r\n        }\r\n    }\r\n\r\n    public closeDialog(): void {\r\n        this.controller.playButtons.deselectButton(2);\r\n        this.dialog.close();\r\n    }\r\n\r\n    public setChartConfig(xAsis: string, yAxis: string, title: string): void {\r\n        // update label interval and angle based on data\r\n        this.setLabelIntervalAndAngle();\r\n        this.chart.xAxisTitle = xAsis;\r\n        this.chart.yAxisTitle = yAxis;\r\n        this.chart.chartTitle = title;\r\n    }\r\n\r\n    public setLabelIntervalAndAngle(): void {\r\n        const intervalSet = this.chartData.length;\r\n        if (intervalSet < 10) {\r\n            this.chart.xAxisLabelAngle = 0;\r\n            this.chart.xAxisInterval = 1;\r\n        } else if (intervalSet < 15) {\r\n            this.chart.xAxisLabelAngle = 30;\r\n            this.chart.xAxisInterval = 1;\r\n        } else if (intervalSet < 40) {\r\n            this.chart.xAxisLabelAngle = 90;\r\n            this.chart.xAxisInterval = 1;\r\n        } else if (intervalSet < 100) {\r\n            this.chart.xAxisLabelAngle = 90;\r\n            this.chart.xAxisInterval = 3;\r\n        } else if (intervalSet < 200) {\r\n            this.chart.xAxisLabelAngle = 90;\r\n            this.chart.xAxisInterval = 5;\r\n        } else if (intervalSet < 400) {\r\n            this.chart.xAxisLabelAngle = 90;\r\n            this.chart.xAxisInterval = 7;\r\n        } else if (intervalSet > 400) {\r\n            this.chart.xAxisLabelAngle = 90;\r\n            this.chart.xAxisInterval = 10;\r\n        }\r\n        this.chart.yAxisAbbreviateLargeNumbers = true;\r\n    }\r\n\r\n    public openSingleRowChart(rowData: Stock): void {\r\n        this.chartData = [];\r\n        setTimeout(() => {\r\n            this.chartData = this.finGrid.grid.data.filter(item => item.region === rowData.region &&\r\n                item.category === rowData.category);\r\n\r\n            this.chart.notifyInsertItem(this.chartData, this.chartData.length - 1, {});\r\n\r\n            this.setLabelIntervalAndAngle();\r\n            this.chart.chartTitle = 'Data Chart with prices of ' + this.chartData[0].category + ' in ' +\r\n                this.chartData[0].region + ' Region';\r\n\r\n            this.dialog.open();\r\n        }, 200);\r\n    }\r\n\r\n    public stopFeed(): void {\r\n        if (this._timer) {\r\n            clearInterval(this._timer);\r\n        }\r\n    }\r\n\r\n    public ngOnDestroy(): void {\r\n        this.stopFeed();\r\n    }\r\n}\r\n","isMain":true,"fileExtension":"ts","fileHeader":"ts"},{"hasRelativeAssetsUrls":false,"path":"src/app/grid-finjs/main.component.html","content":"<div class=\"main__wrapper igx-scrollbar\" [class.fin-dark-theme]=\"darkTheme\">\r\n    <app-finjs-controllers #controllers\r\n        (switchChanged)=\"onSwitchChanged($event)\"\r\n        (volumeChanged)=\"onVolumeChanged($event)\"\r\n        (frequencyChanged)=\"onFrequencyChanged($event)\"\r\n        (playAction)=\"onPlayAction($event)\">\r\n    </app-finjs-controllers>\r\n    <app-finjs-grid #finGrid\r\n        (selectedDataChanged)=\"setChartData($event)\"\r\n        (keyDown)=\"dialog.open()\"\r\n        (chartColumnKeyDown)=\"openSingleRowChart($event)\">\r\n    </app-finjs-grid>\r\n</div>\r\n\r\n<igx-dialog #dialog [closeOnOutsideSelect]=\"true\" (closing)=\"onCloseHandler()\">\r\n    <div (keydown)=\"closeDialog()\" class=\"chart-container\">\r\n        <igx-dialog-title> Chart </igx-dialog-title>\r\n\r\n        <div>\r\n            <igx-category-chart #chart1 [dataSource]=\"chartData\" width=\"100%\" chartType=\"column\" xAxisInterval=\"20\"\r\n                xAxisLabelAngle=\"90\" [includedProperties]=\"properties\" height=\"400px\" [tooltipTemplate]=\"seriesTooltip\">\r\n            </igx-category-chart>\r\n        </div>\r\n\r\n        <div igxDialogActions>\r\n            <button igxButton (click)=\"closeDialog()\" [igxFocus]=\"dialog.isOpen\">ОК</button>\r\n        </div>\r\n    </div>\r\n</igx-dialog>\r\n\r\n<ng-template let-series=\"series\" let-item=\"item\" #seriesTooltip>\r\n    <div class=\"tooltipTable\">\r\n        <div class=\"tooltipRow\">\r\n            <div><b>Category:</b> {{ item.category }}</div>\r\n        </div>\r\n        <div class=\"tooltipRow\">\r\n            <div><b>Country:</b> {{ item.country }}</div>\r\n        </div>\r\n        <div class=\"tooltipRow\">\r\n            <div><b>Price:</b> ${{ item.price }}</div>\r\n        </div>\r\n    </div>\r\n</ng-template>\r\n","isMain":true,"fileExtension":"html","fileHeader":"html"},{"hasRelativeAssetsUrls":false,"path":"src/app/grid-finjs/main.component.scss","content":".main__wrapper {\r\n    height: 100%;\r\n    min-height: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    app-finjs-grid {\r\n        height: 100%;\r\n    }\r\n}\r\n\r\n.chart-container {\r\n\r\n    width: 50vw;\r\n}\r\n\r\n:host ::ng-deep {\r\n    .fin-dark-theme {\r\n        .finjs-slider,\r\n        .sample-toolbar {\r\n            color: rgba(255, 255, 255, 0.87);\r\n        }\r\n    }\r\n}\r\n","isMain":true,"fileExtension":"scss","fileHeader":"scss"},{"hasRelativeAssetsUrls":false,"path":"src/app/directives/prevent-scroll.directive.ts","content":"import { AfterViewInit, Directive, Host, Input, NgModule, Optional, OnDestroy, Inject } from '@angular/core';\r\nimport { IgxGridBaseDirective, IgxGridComponent, IGX_GRID_BASE } from 'igniteui-angular';\r\n\r\n@Directive({\r\n    // eslint-disable-next-line @angular-eslint/directive-selector\r\n    selector: '[igxPreventDocumentScroll]'\r\n})\r\nexport class IgxPreventDocumentScrollDirective implements AfterViewInit, OnDestroy {\r\n    private _preventScroll = true;\r\n    private gridBody: HTMLElement;\r\n\r\n    /**\r\n     *  A boolean indicating if page scroll should be prevented while mouse wheeling over the grid,\r\n     * when grid scroll has reached top or bottom. Defaults to true.\r\n     * ```html\r\n     * <igx-grid igxPreventDocumentScroll></igx-grid>\r\n     * <igx-grid [igxPreventDocumentScroll]='false'></igx-grid>\r\n     * ```\r\n     */\r\n    @Input('igxPreventDocumentScroll')\r\n    public set preventScroll(val: boolean) {\r\n        if (val === false) { this._preventScroll = false; }\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    constructor(@Host() @Optional() @Inject(IGX_GRID_BASE) private grid: IgxGridBaseDirective) {\r\n    }\r\n\r\n    public ngAfterViewInit() {\r\n        this.gridBody = this.getGridTBody();\r\n        if (this._preventScroll) {\r\n            this.gridBody.addEventListener('wheel', this.preventDocumentScroll, { passive: false });\r\n        }\r\n    }\r\n\r\n    public ngOnDestroy() {\r\n        this.gridBody.removeEventListener('wheel', this.preventDocumentScroll);\r\n    }\r\n\r\n    /**\r\n     * Prevents scrolling the page, when mouse wheel over the grid body.\r\n     */\r\n    private preventDocumentScroll(event) {\r\n        event.preventDefault();\r\n    }\r\n\r\n    private getGridTBody(): HTMLElement {\r\n        return this.grid.tbody.nativeElement;\r\n    }\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\n@NgModule({\r\n    declarations: [IgxPreventDocumentScrollDirective],\r\n    exports: [IgxPreventDocumentScrollDirective]\r\n})\r\n\r\nexport class IgxPreventDocumentScrollModule { }\r\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/services/financial.service.ts","content":"import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { FinancialData, Stock } from '../data/financialData';\r\n\r\n@Injectable()\r\nexport class FinancialDataService {\r\n    public records: Observable<Stock[]>;\r\n    public _records: BehaviorSubject<Stock[]>;\r\n\r\n    constructor() {\r\n        this._records = new BehaviorSubject([]);\r\n        this.records = this._records.asObservable();\r\n    }\r\n\r\n    public getData(count: number = 10): void {\r\n        this._records.next(FinancialData.generateData(count));\r\n    }\r\n\r\n    public getHierarchicalData(count: number = 10): void {\r\n        this._records.next(FinancialData.generateHierarchicalData(count));\r\n    }\r\n}\r\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/services/signal-r.service.ts","content":"import { Injectable, NgZone, OnDestroy } from '@angular/core';\r\nimport * as signalR from '@microsoft/signalr';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { FinancialData, Stock } from '../data/financialData';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class SignalRService implements OnDestroy {\r\n    public data: BehaviorSubject<Stock[]>;\r\n    public hasRemoteConnection: boolean;\r\n    private hubConnection!: signalR.HubConnection;\r\n    private _timer!: ReturnType<typeof setInterval>;\r\n\r\n    constructor(private zone: NgZone) {\r\n        this.data = new BehaviorSubject([] as Stock[]);\r\n    }\r\n\r\n    public ngOnDestroy(): void {\r\n        this.stopLiveData();\r\n    }\r\n\r\n    public startConnection = (interval = 500, volume = 1000, live = false, updateAll = true): void => {\r\n        this.hubConnection = new signalR.HubConnectionBuilder()\r\n            .configureLogging(signalR.LogLevel.Trace)\r\n            .withUrl('https://www.infragistics.com/angular-apis/webapi/streamHub')\r\n            .build();\r\n        this.hubConnection\r\n            .start()\r\n            .then(() => {\r\n                this.hasRemoteConnection = true;\r\n                this.registerSignalEvents();\r\n                this.broadcastParams(interval, volume, live, updateAll);\r\n            })\r\n            .catch(() => {\r\n                this.hasRemoteConnection = false;\r\n                if (this._timer) { this.stopFeed(); }\r\n                const data = FinancialData.generateData(volume);\r\n                live ? this._timer = setInterval(() => updateAll ?\r\n                    this.updateAllPriceValues(data) : this.updateRandomPriceValues(data), interval) :\r\n                        this.getData(volume);\r\n            });\r\n    };\r\n\r\n    public broadcastParams = (frequency, volume, live, updateAll = true): void => {\r\n        this.hubConnection.invoke('updateparameters', frequency, volume, live, updateAll)\r\n            .then(() => console.log('requestLiveData', volume))\r\n            .catch(err => {\r\n                console.error(err);\r\n            });\r\n    };\r\n\r\n    public stopLiveData = (): void => {\r\n        if (this.hasRemoteConnection) {\r\n            this.hubConnection.invoke('StopTimer')\r\n            .catch(err => console.error(err));\r\n        } else {\r\n            this.stopFeed();\r\n        }\r\n    };\r\n\r\n    public getData(count: number = 10): void {\r\n        this.data.next(FinancialData.generateData(count));\r\n    }\r\n\r\n    public updateAllPriceValues(data: Stock[]): void {\r\n        this.zone.runOutsideAngular(() =>  {\r\n            const newData = FinancialData.updateAllPrices(data);\r\n            this.data.next(newData);\r\n        });\r\n    }\r\n\r\n    public updateRandomPriceValues(data: Stock[]): void {\r\n        this.zone.runOutsideAngular(() =>  {\r\n            const newData = FinancialData.updateRandomPrices(data);\r\n            this.data.next(newData);\r\n        });\r\n    }\r\n\r\n    private stopFeed(): void {\r\n        if (this._timer) {\r\n            clearInterval(this._timer);\r\n        }\r\n    }\r\n\r\n    // Register signalR events\r\n    private registerSignalEvents(): void {\r\n        this.hubConnection.onclose(() => {\r\n            this.hasRemoteConnection = false;\r\n        });\r\n        this.hubConnection.on('transferdata', (data: Stock[]) => {\r\n            this.data.next(data);\r\n        });\r\n    }\r\n}\r\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/data/financialData.ts","content":"/* eslint-disable @typescript-eslint/naming-convention */\r\nexport interface Country {\r\n    Name: string;\r\n}\r\n\r\nexport interface Region {\r\n    Name: string;\r\n    Countries: Country[];\r\n}\r\nexport interface MockFinanceData {\r\n    indGrou?: string;\r\n    indSect?: string;\r\n    indSubg?: string;\r\n    secType?: string;\r\n    cpnTyp?: string;\r\n    issuerN?: string;\r\n    moodys?: string;\r\n    fitch?: string;\r\n    dbrs?: string;\r\n    collatT?: string;\r\n    curncy?: string;\r\n    security?: string;\r\n    sector?: string;\r\n    cusip?: string;\r\n    ticker?: string;\r\n    cpn?: string;\r\n    maturity?: string;\r\n    krD_3YR?: number;\r\n    RISK_COUNTRY?: string;\r\n    MUNI_SECTOR?: string;\r\n    zV_SPREAD?: number;\r\n    kRD_5YR?: number;\r\n    kRD_1YR?: number;\r\n    PD_WALA?: string | null;\r\n}\r\n\r\nexport interface Stock extends MockFinanceData {\r\n    id?: number;\r\n    category: string;\r\n    type: string;\r\n    spread: number;\r\n    openPrice: number;\r\n    price: number;\r\n    buy: number;\r\n    sell: number;\r\n    change: number;\r\n    changeP: number;\r\n    volume: number;\r\n    highD: number;\r\n    lowD: number;\r\n    highY: number;\r\n    lowY: number;\r\n    startY: number;\r\n    'change On Year(%)': number;\r\n    categories?: Stock[];\r\n    region?: string;\r\n    country?: string;\r\n    settlement?: string;\r\n    contract?: string;\r\n    lastUpdated?: Date;\r\n    openPriceDiff?: number;\r\n    buyDiff?: number;\r\n    sellDiff?: number;\r\n    startYDiff?: number;\r\n    highYDiff?: number;\r\n    lowYDiff?: number;\r\n    highDDiff?: number;\r\n    lowDDiff?: number;\r\n}\r\n\r\nexport const REGIONS: Region[] = [\r\n    {\r\n        Name: 'North America',\r\n        Countries: [\r\n            { Name: 'Canada' },\r\n            { Name: 'United States' },\r\n            { Name: 'Mexico' }\r\n        ]\r\n    },\r\n    {\r\n        Name: 'Middle East',\r\n        Countries: [\r\n            { Name: 'Turkey' },\r\n            { Name: 'Iraq' },\r\n            { Name: 'Saudi Arabia' },\r\n            { Name: 'Syria' },\r\n            { Name: 'UAE' },\r\n            { Name: 'Israel' },\r\n            { Name: 'Jordan' },\r\n            { Name: 'Lebanon' },\r\n            { Name: 'Oman' },\r\n            { Name: 'Kuwait' },\r\n            { Name: 'Qatar' },\r\n            { Name: 'Bahrain' },\r\n            { Name: 'Iran' }\r\n        ]\r\n    },\r\n    {\r\n        Name: 'Europe',\r\n        Countries: [\r\n            { Name: 'Russia' },\r\n            { Name: 'Germany' },\r\n            { Name: 'France' },\r\n            { Name: 'United Kingdom' },\r\n            { Name: 'Italy' },\r\n            { Name: 'Spain' },\r\n            { Name: 'Poland' },\r\n            { Name: 'Romania' },\r\n            { Name: 'Netherlands' },\r\n            { Name: 'Belgium' },\r\n            { Name: 'Greece' },\r\n            { Name: 'Portugal' },\r\n            { Name: 'Czech Republic' },\r\n            { Name: 'Hungary' },\r\n            { Name: 'Sweden' },\r\n            { Name: 'Austria' },\r\n            { Name: 'Switzerland' },\r\n            { Name: 'Bulgaria' },\r\n            { Name: 'Denmark' },\r\n            { Name: 'Finland' },\r\n            { Name: 'Slovakia' },\r\n            { Name: 'Norway' },\r\n            { Name: 'Ireland' },\r\n            { Name: 'Croatia' },\r\n            { Name: 'Slovenia' },\r\n            { Name: 'Estonia' },\r\n            { Name: 'Iceland' }\r\n        ]\r\n    },\r\n    {\r\n        Name: 'Africa',\r\n        Countries: [\r\n            { Name: 'Nigeria' },\r\n            { Name: 'Ethiopia' },\r\n            { Name: 'Egypt' },\r\n            { Name: 'South Africa' },\r\n            { Name: 'Algeria' },\r\n            { Name: 'Morocco' },\r\n            { Name: 'Cameroon' },\r\n            { Name: 'Niger' },\r\n            { Name: 'Senegal' },\r\n            { Name: 'Tunisia' },\r\n            { Name: 'Libya' }\r\n        ]\r\n    },\r\n    {\r\n        Name: 'Asia Pacific',\r\n        Countries: [\r\n            { Name: 'Afghanistan' },\r\n            { Name: 'Australia' },\r\n            { Name: 'Azerbaijan' },\r\n            { Name: 'China' },\r\n            { Name: 'Hong Kong' },\r\n            { Name: 'India' },\r\n            { Name: 'Indonesia' },\r\n            { Name: 'Japan' },\r\n            { Name: 'Malaysia' },\r\n            { Name: 'New Zealand' },\r\n            { Name: 'Pakistan' },\r\n            { Name: 'Philippines' },\r\n            { Name: 'Korea' },\r\n            { Name: 'Singapore' },\r\n            { Name: 'Taiwan' },\r\n            { Name: 'Thailand' }\r\n        ]\r\n    },\r\n    {\r\n        Name: 'South America',\r\n        Countries: [\r\n            { Name: 'Argentina' },\r\n            { Name: 'Bolivia' },\r\n            { Name: 'Brazil' },\r\n            { Name: 'Chile' },\r\n            { Name: 'Colombia' },\r\n            { Name: 'Ecuador' },\r\n            { Name: 'Guyana' },\r\n            { Name: 'Paraguay' },\r\n            { Name: 'Peru' },\r\n            { Name: 'Suriname' },\r\n            { Name: 'Uruguay' },\r\n            { Name: 'Venezuela' }\r\n        ]\r\n    }\r\n];\r\n\r\nexport const Dealtype: string[] = [\r\n    'buy', 'sell'\r\n];\r\n\r\nexport const Contract: string[] = [\r\n    'Forwards', 'Futures', 'Options', 'Swap', 'CFD'\r\n];\r\n\r\nexport const Settlement: string[] = [\r\n    'Deliverable', 'Cash'\r\n];\r\n\r\nexport const MOCKFINANCEDATA: MockFinanceData[] = [\r\n    {\r\n        indGrou: 'Airlines',\r\n        indSect: 'Consumer, Cyclical',\r\n        indSubg: 'Airlines',\r\n        secType: 'PUBLIC',\r\n        // tslint:disable-next-line:object-literal-sort-keys\r\n        cpnTyp: 'FIXED',\r\n        issuerN: 'AMERICAN AIRLINES GROUP',\r\n        moodys: 'WR',\r\n        fitch: 'N.A.',\r\n        dbrs: 'N.A.',\r\n        collatT: 'NEW MONEY',\r\n        curncy: 'USD',\r\n        security: '001765866 Pfd',\r\n        sector: 'Pfd',\r\n        cusip: '1765866',\r\n        ticker: 'AAL',\r\n        cpn: '7.875',\r\n        maturity: '7/13/1939',\r\n        krD_3YR: 0.00006,\r\n        RISK_COUNTRY: '',\r\n        MUNI_SECTOR: '',\r\n        zV_SPREAD: 28.302,\r\n        kRD_5YR: 0,\r\n        kRD_1YR: -0.00187,\r\n        PD_WALA: null\r\n    }\r\n];\r\n\r\nexport const DATA: Stock[] = [\r\n    {\r\n        category: 'Metal',\r\n        type: 'Gold',\r\n        spread: 0.01,\r\n        openPrice: 1281.10,\r\n        price: 1280.7317,\r\n        buy: 1280.7267,\r\n        sell: 1280.7367,\r\n        change: -0.3683,\r\n        changeP: -0.0287,\r\n        volume: 48387,\r\n        highD: 1289.50,\r\n        lowD: 1279.10,\r\n        highY: 1306,\r\n        lowY: 1047.20,\r\n        startY: 1176.60,\r\n        'change On Year(%)': 8.8502\r\n    },\r\n    {\r\n        category: 'Metal',\r\n        type: 'Silver',\r\n        spread: 0.01,\r\n        openPrice: 17.43,\r\n        price: 17.42,\r\n        buy: 17.43,\r\n        sell: 17.43,\r\n        change: -0.01,\r\n        changeP: -0.0574,\r\n        volume: 11720,\r\n        highD: 17.51,\r\n        lowD: 17.37,\r\n        highY: 18.06,\r\n        lowY: 13.73,\r\n        startY: 15.895,\r\n        'change On Year(%)': 9.5942\r\n    },\r\n    {\r\n        category: 'Metal',\r\n        type: 'Copper',\r\n        spread: 0.02,\r\n        openPrice: 2.123,\r\n        price: 2.113,\r\n        buy: 2.123,\r\n        sell: 2.123,\r\n        change: -0.01,\r\n        changeP: -0.471,\r\n        volume: 28819,\r\n        highD: 2.16,\r\n        lowD: 2.11,\r\n        highY: 2.94,\r\n        lowY: 1.96,\r\n        startY: 2.45,\r\n        'change On Year(%)': -13.7551\r\n    },\r\n    {\r\n        category: 'Metal',\r\n        type: 'Platinum',\r\n        spread: 0.01,\r\n        openPrice: 1071.60,\r\n        price: 1071.0993,\r\n        buy: 1071.0943,\r\n        sell: 1071.1043,\r\n        change: -0.5007,\r\n        changeP: -0.0467,\r\n        volume: 3039,\r\n        highD: 1081.20,\r\n        lowD: 1070.50,\r\n        highY: 1120.60,\r\n        lowY: 812.40,\r\n        startY: 966.50,\r\n        'change On Year(%)': 10.8225\r\n    },\r\n    {\r\n        category: 'Metal',\r\n        type: 'Palladium',\r\n        spread: 0.01,\r\n        openPrice: 600.55,\r\n        price: 601.0005,\r\n        buy: 600.9955,\r\n        sell: 601.0055,\r\n        change: 0.4505,\r\n        changeP: 0.075,\r\n        volume: 651,\r\n        highD: 607.20,\r\n        lowD: 598.40,\r\n        highY: 690,\r\n        lowY: 458.6,\r\n        startY: 574.3,\r\n        'change On Year(%)': 4.6492\r\n    },\r\n    {\r\n        category: 'Oil',\r\n        type: 'Oil',\r\n        spread: 0.015,\r\n        openPrice: 45.54,\r\n        price: 45.7899,\r\n        buy: 45.7824,\r\n        sell: 45.7974,\r\n        change: 0.2499,\r\n        changeP: 0.5487,\r\n        volume: 107196,\r\n        highD: 45.94,\r\n        lowD: 45.00,\r\n        highY: 65.28,\r\n        lowY: 30.79,\r\n        startY: 48.035,\r\n        'change On Year(%)': -4.6739\r\n    },\r\n    {\r\n        category: 'Oil',\r\n        type: 'Brent',\r\n        spread: 0.01,\r\n        openPrice: 46.06,\r\n        price: 46.05,\r\n        buy: 46.06,\r\n        sell: 46.06,\r\n        change: -0.01,\r\n        changeP: -0.0217,\r\n        volume: 59818,\r\n        highD: 46.48,\r\n        lowD: 45.60,\r\n        highY: 71.14,\r\n        lowY: 30.02,\r\n        startY: 50.58,\r\n        'change On Year(%)': -8.9561\r\n    },\r\n    {\r\n        category: 'Oil',\r\n        type: 'Natural Gas',\r\n        spread: 0.02,\r\n        openPrice: 2.094,\r\n        price: 2.104,\r\n        buy: 2.094,\r\n        sell: 2.094,\r\n        change: 0.01,\r\n        changeP: 0.4776,\r\n        volume: 2783,\r\n        highD: 2.11,\r\n        lowD: 2.09,\r\n        highY: 3.20,\r\n        lowY: 1.84,\r\n        startY: 2.52,\r\n        'change On Year(%)': -16.5079\r\n    },\r\n    {\r\n        category: 'Oil',\r\n        type: 'RBOB Gas',\r\n        spread: 0.015,\r\n        openPrice: 1.5086,\r\n        price: 1.9532,\r\n        buy: 1.9457,\r\n        sell: 1.9607,\r\n        change: 0.4446,\r\n        changeP: 29.4686,\r\n        volume: 2646,\r\n        highD: 1.9532,\r\n        lowD: 1.50,\r\n        highY: 2.05,\r\n        lowY: 1.15,\r\n        startY: 1.60,\r\n        'change On Year(%)': 22.0727\r\n    },\r\n    {\r\n        category: 'Oil',\r\n        type: 'Diesel',\r\n        spread: 0.015,\r\n        openPrice: 1.3474,\r\n        price: 1.3574,\r\n        buy: 1.3474,\r\n        sell: 1.3474,\r\n        change: 0.01,\r\n        changeP: 0.7422,\r\n        volume: 2971,\r\n        highD: 1.36,\r\n        lowD: 1.34,\r\n        highY: 2.11,\r\n        lowY: 0.92,\r\n        startY: 1.515,\r\n        'change On Year(%)': -10.4026\r\n    },\r\n    {\r\n        category: 'Oil',\r\n        type: 'Ethanol',\r\n        spread: 0.01,\r\n        openPrice: 1.512,\r\n        price: 2.7538,\r\n        buy: 2.7488,\r\n        sell: 2.7588,\r\n        change: 1.2418,\r\n        changeP: 82.1323,\r\n        volume: 14,\r\n        highD: 2.7538,\r\n        lowD: 1.1168,\r\n        highY: 2.7538,\r\n        lowY: 1.1168,\r\n        startY: 1.475,\r\n        'change On Year(%)': 86.7011\r\n    },\r\n    {\r\n        category: 'Oil',\r\n        type: 'Uranium',\r\n        spread: 0.02,\r\n        openPrice: 27.55,\r\n        price: 27.58,\r\n        buy: 27.55,\r\n        sell: 27.55,\r\n        change: 0.03,\r\n        changeP: 0.1089,\r\n        volume: 12,\r\n        highD: 27.55,\r\n        lowD: 27.55,\r\n        highY: 29.32,\r\n        lowY: 21.28,\r\n        startY: 25.30,\r\n        'change On Year(%)': 9.0119\r\n    },\r\n    {\r\n        category: 'Oil',\r\n        type: 'Coal',\r\n        spread: 0.015,\r\n        openPrice: 0.4363,\r\n        price: 0.4163,\r\n        buy: 0.4363,\r\n        sell: 0.4363,\r\n        change: -0.02,\r\n        changeP: -4.584,\r\n        volume: 3,\r\n        highD: 0.4363,\r\n        lowD: 0.4363,\r\n        highY: 0.4841,\r\n        lowY: 0.3954,\r\n        startY: 0.4398,\r\n        'change On Year(%)': -5.3326\r\n    },\r\n    {\r\n        category: 'Agriculture',\r\n        type: 'Wheat',\r\n        spread: 0.01,\r\n        openPrice: 465.50,\r\n        price: 465.52,\r\n        buy: 465.50,\r\n        sell: 465.50,\r\n        change: 0.02,\r\n        changeP: 0.0043,\r\n        volume: 4318,\r\n        highD: 467.00,\r\n        lowD: 463.25,\r\n        highY: 628.50,\r\n        lowY: 449.50,\r\n        startY: 539.00,\r\n        'change On Year(%)': -13.6327\r\n    },\r\n    {\r\n        category: 'Agriculture',\r\n        type: 'Corn',\r\n        spread: 0.01,\r\n        openPrice: 379.50,\r\n        price: 379.8026,\r\n        buy: 379.7976,\r\n        sell: 379.8076,\r\n        change: 0.3026,\r\n        changeP: 0.0797,\r\n        volume: 11266,\r\n        highD: 381.00,\r\n        lowD: 377.75,\r\n        highY: 471.25,\r\n        lowY: 351.25,\r\n        startY: 411.25,\r\n        'change On Year(%)': -7.6468\r\n    },\r\n    {\r\n        category: 'Agriculture',\r\n        type: 'Sugar',\r\n        spread: 0.01,\r\n        openPrice: 15.68,\r\n        price: 14.6742,\r\n        buy: 14.6692,\r\n        sell: 14.6792,\r\n        change: -1.0058,\r\n        changeP: -6.4146,\r\n        volume: 4949,\r\n        highD: 15.70,\r\n        lowD: 14.6742,\r\n        highY: 16.87,\r\n        lowY: 11.37,\r\n        startY: 14.12,\r\n        'change On Year(%)': 3.9249\r\n    },\r\n    {\r\n        category: 'Agriculture',\r\n        type: 'Soybean',\r\n        spread: 0.01,\r\n        openPrice: 1038.00,\r\n        price: 1038.6171,\r\n        buy: 1038.6121,\r\n        sell: 1038.6221,\r\n        change: 0.6171,\r\n        changeP: 0.0595,\r\n        volume: 20356,\r\n        highD: 1044.00,\r\n        lowD: 1031.75,\r\n        highY: 1057.00,\r\n        lowY: 859.50,\r\n        startY: 958.25,\r\n        'change On Year(%)': 8.3869\r\n    },\r\n    {\r\n        category: 'Agriculture',\r\n        type: 'Soy oil',\r\n        spread: 0.01,\r\n        openPrice: 33.26,\r\n        price: 33.7712,\r\n        buy: 33.7662,\r\n        sell: 33.7762,\r\n        change: 0.5112,\r\n        changeP: 1.5371,\r\n        volume: 10592,\r\n        highD: 33.7712,\r\n        lowD: 33.06,\r\n        highY: 35.43,\r\n        lowY: 26.61,\r\n        startY: 31.02,\r\n        'change On Year(%)': 8.8692\r\n    },\r\n    {\r\n        category: 'Agriculture',\r\n        type: 'Soy Meat',\r\n        spread: 0.01,\r\n        openPrice: 342.60,\r\n        price: 342.62,\r\n        buy: 342.60,\r\n        sell: 342.60,\r\n        change: 0.02,\r\n        changeP: 0.0058,\r\n        volume: 5646,\r\n        highD: 345.40,\r\n        lowD: 340.30,\r\n        highY: 353.40,\r\n        lowY: 261.70,\r\n        startY: 307.55,\r\n        'change On Year(%)': 11.403\r\n    },\r\n    {\r\n        category: 'Agriculture',\r\n        type: 'OJ Future',\r\n        spread: 0.01,\r\n        openPrice: 140.60,\r\n        price: 140.1893,\r\n        buy: 140.1843,\r\n        sell: 140.1943,\r\n        change: -0.4107,\r\n        changeP: -0.2921,\r\n        volume: 7,\r\n        highD: 140.1893,\r\n        lowD: 0.00,\r\n        highY: 155.95,\r\n        lowY: 113.00,\r\n        startY: 134.475,\r\n        'change On Year(%)': 4.2493\r\n    },\r\n    {\r\n        category: 'Agriculture',\r\n        type: 'Coffee',\r\n        spread: 0.01,\r\n        openPrice: 125.70,\r\n        price: 125.69,\r\n        buy: 125.70,\r\n        sell: 125.70,\r\n        change: -0.01,\r\n        changeP: -0.008,\r\n        volume: 1654,\r\n        highD: 125.80,\r\n        lowD: 125.00,\r\n        highY: 155.75,\r\n        lowY: 115.35,\r\n        startY: 135.55,\r\n        'change On Year(%)': -7.2741\r\n    },\r\n    {\r\n        category: 'Agriculture',\r\n        type: 'Cocoa',\r\n        spread: 0.01,\r\n        openPrice: 3076.00,\r\n        price: 3076.03,\r\n        buy: 3076.00,\r\n        sell: 3076.00,\r\n        change: 0.03,\r\n        changeP: 0.001,\r\n        volume: 978,\r\n        highD: 3078.00,\r\n        lowD: 3066.00,\r\n        highY: 3406.00,\r\n        lowY: 2746.00,\r\n        startY: 3076.00,\r\n        'change On Year(%)': 0.001\r\n    },\r\n    {\r\n        category: 'Agriculture',\r\n        type: 'Rice',\r\n        spread: 0.01,\r\n        openPrice: 11.245,\r\n        price: 10.4154,\r\n        buy: 10.4104,\r\n        sell: 10.4204,\r\n        change: -0.8296,\r\n        changeP: -7.3779,\r\n        volume: 220,\r\n        highD: 11.38,\r\n        lowD: 10.4154,\r\n        highY: 14.14,\r\n        lowY: 9.70,\r\n        startY: 11.92,\r\n        'change On Year(%)': -12.6228\r\n    },\r\n    {\r\n        category: 'Agriculture',\r\n        type: 'Oats',\r\n        spread: 0.01,\r\n        openPrice: 194.50,\r\n        price: 194.2178,\r\n        buy: 194.2128,\r\n        sell: 194.2228,\r\n        change: -0.2822,\r\n        changeP: -0.1451,\r\n        volume: 64,\r\n        highD: 195.75,\r\n        lowD: 194.00,\r\n        highY: 241.25,\r\n        lowY: 183.75,\r\n        startY: 212.50,\r\n        'change On Year(%)': -8.6034\r\n    },\r\n    {\r\n        category: 'Agriculture',\r\n        type: 'Milk',\r\n        spread: 0.01,\r\n        openPrice: 12.87,\r\n        price: 12.86,\r\n        buy: 12.87,\r\n        sell: 12.87,\r\n        change: -0.01,\r\n        changeP: -0.0777,\r\n        volume: 7,\r\n        highD: 12.89,\r\n        lowD: 12.81,\r\n        highY: 16.96,\r\n        lowY: 12.81,\r\n        startY: 14.885,\r\n        'change On Year(%)': -13.6043\r\n    },\r\n    {\r\n        category: 'Agriculture',\r\n        type: 'Cotton',\r\n        spread: 0.01,\r\n        openPrice: 61.77,\r\n        price: 61.76,\r\n        buy: 61.77,\r\n        sell: 61.77,\r\n        change: -0.01,\r\n        changeP: -0.0162,\r\n        volume: 3612,\r\n        highD: 62.06,\r\n        lowD: 61.32,\r\n        highY: 67.59,\r\n        lowY: 54.33,\r\n        startY: 60.96,\r\n        'change On Year(%)': 1.3123\r\n    },\r\n    {\r\n        category: 'Agriculture',\r\n        type: 'Lumber',\r\n        spread: 0.01,\r\n        openPrice: 303.90,\r\n        price: 304.5994,\r\n        buy: 304.5944,\r\n        sell: 304.6044,\r\n        change: 0.6994,\r\n        changeP: 0.2302,\r\n        volume: 2,\r\n        highD: 304.5994,\r\n        lowD: 303.90,\r\n        highY: 317.10,\r\n        lowY: 236.00,\r\n        startY: 276.55,\r\n        'change On Year(%)': 10.1426\r\n    },\r\n    {\r\n        category: 'Livestock',\r\n        type: 'LV Cattle',\r\n        spread: 0.01,\r\n        openPrice: 120.725,\r\n        price: 120.705,\r\n        buy: 120.725,\r\n        sell: 120.725,\r\n        change: -0.02,\r\n        changeP: -0.0166,\r\n        volume: 4,\r\n        highD: 120.725,\r\n        lowD: 120.725,\r\n        highY: 147.98,\r\n        lowY: 113.90,\r\n        startY: 130.94,\r\n        'change On Year(%)': -7.8166\r\n    },\r\n    {\r\n        category: 'Livestock',\r\n        type: 'FD Cattle',\r\n        spread: 0.01,\r\n        openPrice: 147.175,\r\n        price: 148.6065,\r\n        buy: 148.6015,\r\n        sell: 148.6115,\r\n        change: 1.4315,\r\n        changeP: 0.9727,\r\n        volume: 5,\r\n        highD: 148.6065,\r\n        lowD: 147.175,\r\n        highY: 190.00,\r\n        lowY: 138.10,\r\n        startY: 164.05,\r\n        'change On Year(%)': -9.4139\r\n    },\r\n    {\r\n        category: 'Livestock',\r\n        type: 'Lean Hogs',\r\n        spread: 0.01,\r\n        openPrice: 81.275,\r\n        price: 81.8146,\r\n        buy: 81.8096,\r\n        sell: 81.8196,\r\n        change: 0.5396,\r\n        changeP: 0.664,\r\n        volume: 1,\r\n        highD: 81.8146,\r\n        lowD: 81.275,\r\n        highY: 83.98,\r\n        lowY: 70.25,\r\n        startY: 77.115,\r\n        'change On Year(%)': 6.0943\r\n    },\r\n    {\r\n        category: 'Currencies',\r\n        type: 'USD IDX Future',\r\n        spread: 0.02,\r\n        openPrice: 93.88,\r\n        price: 93.7719,\r\n        buy: 93.7619,\r\n        sell: 93.7819,\r\n        change: -0.1081,\r\n        changeP: -0.1151,\r\n        volume: 5788,\r\n        highD: 94.05,\r\n        lowD: 93.7534,\r\n        highY: 100.70,\r\n        lowY: 91.88,\r\n        startY: 96.29,\r\n        'change On Year(%)': -2.6151\r\n    },\r\n    {\r\n        category: 'Currencies',\r\n        type: 'USD/JPY Future',\r\n        spread: 0.02,\r\n        openPrice: 9275.50,\r\n        price: 9277.3342,\r\n        buy: 9277.3242,\r\n        sell: 9277.3442,\r\n        change: 1.8342,\r\n        changeP: 0.0198,\r\n        volume: 47734,\r\n        highD: 9277.3342,\r\n        lowD: 0.93,\r\n        highY: 9483.00,\r\n        lowY: 0.93,\r\n        startY: 4741.965,\r\n        'change On Year(%)': 95.6432\r\n    },\r\n    {\r\n        category: 'Currencies',\r\n        type: 'GBP/USD Future',\r\n        spread: 0.02,\r\n        openPrice: 1.4464,\r\n        price: 1.1941,\r\n        buy: 1.1841,\r\n        sell: 1.2041,\r\n        change: -0.2523,\r\n        changeP: -17.4441,\r\n        volume: 29450,\r\n        highD: 1.45,\r\n        lowD: 1.1941,\r\n        highY: 1.59,\r\n        lowY: 1.1941,\r\n        startY: 1.485,\r\n        'change On Year(%)': -19.59\r\n    },\r\n    {\r\n        category: 'Currencies',\r\n        type: 'AUD/USD Future',\r\n        spread: 0.02,\r\n        openPrice: 0.7344,\r\n        price: 0.7444,\r\n        buy: 0.7344,\r\n        sell: 0.7344,\r\n        change: 0.01,\r\n        changeP: 1.3617,\r\n        volume: 36764,\r\n        highD: 0.74,\r\n        lowD: 0.73,\r\n        highY: 0.79,\r\n        lowY: 0.68,\r\n        startY: 0.735,\r\n        'change On Year(%)': 1.2789\r\n    },\r\n    {\r\n        category: 'Currencies',\r\n        type: 'USD/CAD Future',\r\n        spread: 0.02,\r\n        openPrice: 0.7744,\r\n        price: 0.9545,\r\n        buy: 0.9445,\r\n        sell: 0.9645,\r\n        change: 0.1801,\r\n        changeP: 23.2622,\r\n        volume: 13669,\r\n        highD: 0.9545,\r\n        lowD: 0.77,\r\n        highY: 0.9545,\r\n        lowY: 0.68,\r\n        startY: 0.755,\r\n        'change On Year(%)': 26.4295\r\n    },\r\n    {\r\n        category: 'Currencies',\r\n        type: 'USD/CHF Future',\r\n        spread: 0.02,\r\n        openPrice: 1.0337,\r\n        price: 1.0437,\r\n        buy: 1.0337,\r\n        sell: 1.0337,\r\n        change: 0.01,\r\n        changeP: 0.9674,\r\n        volume: 5550,\r\n        highD: 1.03,\r\n        lowD: 1.03,\r\n        highY: 1.11,\r\n        lowY: 0.98,\r\n        startY: 1.045,\r\n        'change On Year(%)': -0.1244\r\n    },\r\n    {\r\n        category: 'Index',\r\n        type: 'DOW Future',\r\n        spread: 0.01,\r\n        openPrice: 17711.00,\r\n        price: 17712.1515,\r\n        buy: 17712.1465,\r\n        sell: 17712.1565,\r\n        change: 1.1515,\r\n        changeP: 0.0065,\r\n        volume: 22236,\r\n        highD: 17727.00,\r\n        lowD: 17642.00,\r\n        highY: 18083.00,\r\n        lowY: 15299.00,\r\n        startY: 16691.00,\r\n        'change On Year(%)': 6.118\r\n    },\r\n    {\r\n        category: 'Index',\r\n        type: 'S&P Future',\r\n        spread: 0.01,\r\n        openPrice: 2057.50,\r\n        price: 2056.6018,\r\n        buy: 2056.5968,\r\n        sell: 2056.6068,\r\n        change: -0.8982,\r\n        changeP: -0.0437,\r\n        volume: 142780,\r\n        highD: 2059.50,\r\n        lowD: 2049.00,\r\n        highY: 2105.50,\r\n        lowY: 1794.50,\r\n        startY: 1950.00,\r\n        'change On Year(%)': 5.4668\r\n    },\r\n    {\r\n        category: 'Index',\r\n        type: 'NAS Future',\r\n        spread: 0.01,\r\n        openPrice: 4341.25,\r\n        price: 4341.28,\r\n        buy: 4341.25,\r\n        sell: 4341.25,\r\n        change: 0.03,\r\n        changeP: 0.0007,\r\n        volume: 18259,\r\n        highD: 4347.00,\r\n        lowD: 4318.00,\r\n        highY: 4719.75,\r\n        lowY: 3867.75,\r\n        startY: 4293.75,\r\n        'change On Year(%)': 1.107\r\n    },\r\n    {\r\n        category: 'Index',\r\n        type: 'S&P MID MINI',\r\n        spread: 0.01,\r\n        openPrice: 1454.30,\r\n        price: 1455.7812,\r\n        buy: 1455.7762,\r\n        sell: 1455.7862,\r\n        change: 1.4812,\r\n        changeP: 0.1018,\r\n        volume: 338,\r\n        highD: 1455.7812,\r\n        lowD: 1448.00,\r\n        highY: 1527.30,\r\n        lowY: 1236.00,\r\n        startY: 1381.65,\r\n        'change On Year(%)': 5.3654\r\n    },\r\n    {\r\n        category: 'Index',\r\n        type: 'S&P 600 MINI',\r\n        spread: 0.01,\r\n        openPrice: 687.90,\r\n        price: 687.88,\r\n        buy: 687.90,\r\n        sell: 687.90,\r\n        change: -0.02,\r\n        changeP: -0.0029,\r\n        volume: 0,\r\n        highD: 0.00,\r\n        lowD: 0.00,\r\n        highY: 620.32,\r\n        lowY: 595.90,\r\n        startY: 608.11,\r\n        'change On Year(%)': 13.1177\r\n    },\r\n    {\r\n        category: 'Interest Rate',\r\n        type: 'US 30YR Future',\r\n        spread: 0.01,\r\n        openPrice: 164.875,\r\n        price: 164.1582,\r\n        buy: 164.1532,\r\n        sell: 164.1632,\r\n        change: -0.7168,\r\n        changeP: -0.4347,\r\n        volume: 28012,\r\n        highD: 165.25,\r\n        lowD: 164.0385,\r\n        highY: 169.38,\r\n        lowY: 151.47,\r\n        startY: 160.425,\r\n        'change On Year(%)': 2.3271\r\n    },\r\n    {\r\n        category: 'Interest Rate',\r\n        type: 'US 2Y Future',\r\n        spread: 0.01,\r\n        openPrice: 109.3984,\r\n        price: 109.3884,\r\n        buy: 109.3984,\r\n        sell: 109.3984,\r\n        change: -0.01,\r\n        changeP: -0.0091,\r\n        volume: 17742,\r\n        highD: 109.41,\r\n        lowD: 109.38,\r\n        highY: 109.80,\r\n        lowY: 108.62,\r\n        startY: 109.21,\r\n        'change On Year(%)': 0.1634\r\n    },\r\n    {\r\n        category: 'Interest Rate',\r\n        type: 'US 10YR Future',\r\n        spread: 0.01,\r\n        openPrice: 130.5625,\r\n        price: 130.5825,\r\n        buy: 130.5625,\r\n        sell: 130.5625,\r\n        change: 0.02,\r\n        changeP: 0.0153,\r\n        volume: 189310,\r\n        highD: 130.63,\r\n        lowD: 130.44,\r\n        highY: 132.64,\r\n        lowY: 125.48,\r\n        startY: 129.06,\r\n        'change On Year(%)': 1.1797\r\n    },\r\n    {\r\n        category: 'Interest Rate',\r\n        type: 'Euro$ 3M',\r\n        spread: 0.01,\r\n        openPrice: 99.18,\r\n        price: 99.17,\r\n        buy: 99.18,\r\n        sell: 99.18,\r\n        change: -0.01,\r\n        changeP: -0.0101,\r\n        volume: 29509,\r\n        highD: 99.18,\r\n        lowD: 99.17,\r\n        highY: 99.38,\r\n        lowY: 98.41,\r\n        startY: 98.895,\r\n        'change On Year(%)': 0.2781\r\n    }\r\n];\r\nexport class FinancialData {\r\n    public static generateData(count: number): Stock[] {\r\n        const currData: Stock[] = [];\r\n        for (let i = 0; i < count; i++) {\r\n            const rand = Math.floor(Math.random() * Math.floor(DATA.length));\r\n            const dataObj: Stock = Object.assign({}, DATA[rand]);\r\n\r\n            dataObj.settlement = Settlement[this.generateRandomNumber(0, 1)];\r\n            dataObj.contract = Contract[this.generateRandomNumber(0, 4)];\r\n            dataObj.lastUpdated = this.randomizeDate();\r\n            dataObj.openPriceDiff = (((dataObj['openPrice'] - dataObj['price']) / dataObj['price']) * 100) * 150;\r\n            dataObj.buyDiff = (((dataObj.buy - dataObj.price) / dataObj.price) * 100) * 150;\r\n            dataObj.sellDiff = (((dataObj.sell - dataObj.price) / dataObj.price) * 100) * 150;\r\n            dataObj.startYDiff = (((dataObj.startY - dataObj.price) / dataObj.price) * 100) * 150;\r\n            dataObj.highYDiff = (((dataObj.highY - dataObj.price) / dataObj.price) * 100) * 150;\r\n            dataObj.lowYDiff = (((dataObj.lowY - dataObj.price) / dataObj.price) * 100) * 150;\r\n            dataObj.highDDiff = (((dataObj.highD - dataObj.price) / dataObj.price) * 100) * 150;\r\n            dataObj.lowDDiff = (((dataObj.lowD - dataObj.price) / dataObj.price) * 100) * 150;\r\n\r\n            const region: Region = REGIONS[this.generateRandomNumber(0, 5)];\r\n            dataObj.region = region.Name;\r\n            dataObj.country = this.randomizeCountry(region).Name;\r\n\r\n            for (const mockData of MOCKFINANCEDATA) {\r\n                Object.assign(dataObj, mockData);\r\n            }\r\n\r\n            dataObj.id = i;\r\n            this.randomizeObjectData(dataObj);\r\n            currData.push(dataObj);\r\n        }\r\n        return currData;\r\n    }\r\n\r\n    public static generateHierarchicalData(count: number): Stock[] {\r\n        const currData = [];\r\n        for (let i = 0; i < DATA.length; i++) {\r\n            DATA[i].id = 10 + i;\r\n        }\r\n\r\n        for (let i = 0; i < Contract.length; i++) {\r\n            const rand = Math.floor(Math.random() * Math.floor(DATA.length));\r\n            const dataObj = Object.assign({}, DATA[rand]);\r\n            dataObj.category = Contract[i];\r\n            dataObj.categories = [];\r\n            dataObj.id = i * count;\r\n\r\n            // add second level of hierarchical data\r\n            const childData = this.addHierarchicalData(count / 4, i, dataObj.id);\r\n            for (const childDataObj of childData) {\r\n                childDataObj.categories = this.addHierarchicalData(childData.length / 4, i, childDataObj.id, 4);\r\n            }\r\n\r\n            // add level of hierarchical data\r\n            dataObj.categories = childData;\r\n\r\n            this.addMockData(dataObj);\r\n            currData.push(dataObj);\r\n        }\r\n\r\n        return currData;\r\n    }\r\n\r\n    public static updateAllPrices(data: Stock[]): Stock[] {\r\n        for (const dataRow of data) {\r\n            this.randomizeObjectData(dataRow);\r\n        }\r\n        return Array.from(data);\r\n    }\r\n\r\n    public static updateRandomPrices(data: Stock[]): Stock[] {\r\n        const currData = data.slice(0, data.length + 1);\r\n        for (let i = 0; i < 30; i++) {\r\n            const random = Math.round(Math.random() * data.length);\r\n            const dataObj = Object.assign({}, data[random]);\r\n            this.randomizeObjectData(dataObj);\r\n            currData[random] = dataObj;\r\n        }\r\n        // return {data: currData, recordsUpdated: y };\r\n        return currData;\r\n    }\r\n\r\n    private static addMockData(dataObj: Stock): void {\r\n        for (const mockData of MOCKFINANCEDATA) {\r\n            Object.assign(dataObj, mockData);\r\n        }\r\n    }\r\n\r\n    private static addHierarchicalData(count: number, i: number, parentRowId: number, toAdd?: number): Stock[] {\r\n        const childData: Stock[] = [];\r\n        const numberToAdd = toAdd ?? Math.round(count / Contract.length);\r\n        for (let y = 0; y < numberToAdd; y++) {\r\n            const rand = Math.floor(Math.random() * Math.floor(DATA.length));\r\n            const childDataObj = Object.assign({}, DATA[rand]);\r\n            childDataObj.id = parentRowId * 10 + y + 1;\r\n            this.randomizeObjectData(childDataObj);\r\n            this.addMockData(childDataObj);\r\n            childData.push(childDataObj);\r\n        }\r\n        return childData;\r\n    }\r\n\r\n    private static randomizeObjectData(dataObj: Stock): void {\r\n        const res = this.generateNewPrice(dataObj.price);\r\n        dataObj.change = res.price - dataObj.price;\r\n        dataObj.price = res.price;\r\n        dataObj.changeP = res.changePercent;\r\n    }\r\n\r\n    private static generateNewPrice(oldPrice: number): { price: number; changePercent: number } {\r\n        const rnd = parseFloat(Math.random().toFixed(2));\r\n        const volatility = 2;\r\n        let newPrice = 0;\r\n\r\n        let changePercent = 2 * volatility * rnd;\r\n        if (changePercent > volatility) {\r\n            changePercent -= (2 * volatility);\r\n        }\r\n\r\n        const changeAmount = oldPrice * (changePercent / 100);\r\n        newPrice = oldPrice + changeAmount;\r\n\r\n        const result = { price: 0, changePercent: 0 };\r\n        result.price = parseFloat(newPrice.toFixed(2));\r\n        result.changePercent = parseFloat(changePercent.toFixed(2));\r\n\r\n        return result;\r\n    }\r\n\r\n    private static generateRandomNumber(min: number, max: number): number {\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    }\r\n\r\n    private static randomizeCountry(region: Region): Country {\r\n        let country!: Country;\r\n        switch (region.Name) {\r\n            case 'North America': {\r\n                country = region.Countries[this.generateRandomNumber(0, 2)];\r\n                break;\r\n            }\r\n            case 'South America': {\r\n                country = region.Countries[this.generateRandomNumber(0, 11)];\r\n                break;\r\n            }\r\n            case 'Europe': {\r\n                country = region.Countries[this.generateRandomNumber(0, 26)];\r\n                break;\r\n            }\r\n            case 'Asia Pacific': {\r\n                country = region.Countries[this.generateRandomNumber(0, 15)];\r\n                break;\r\n            }\r\n            case 'Africa': {\r\n                country = region.Countries[this.generateRandomNumber(0, 10)];\r\n                break;\r\n            }\r\n            case 'Middle East': {\r\n                country = region.Countries[this.generateRandomNumber(0, 12)];\r\n                break;\r\n            }\r\n        }\r\n        return country;\r\n    }\r\n\r\n    private static randomizeDate(): Date {\r\n        const date = new Date();\r\n        date.setHours(this.generateRandomNumber(0, 23));\r\n        date.setMonth(this.generateRandomNumber(0, date.getMonth()));\r\n        date.setDate(this.generateRandomNumber(0, 23));\r\n        return date;\r\n    }\r\n}\r\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/grid-finjs/controllers.component.ts","content":"import { Component, EventEmitter, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';\r\nimport {\r\n    IButtonGroupEventArgs, IChangeSwitchEventArgs, IgxButtonGroupComponent,\r\n    IgxSliderComponent, IgxToastComponent, ISliderValueChangeEventArgs, VerticalAlignment }\r\nfrom 'igniteui-angular';\r\nimport { Observable, Subscription, timer } from 'rxjs';\r\nimport { debounce } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'app-finjs-controllers',\r\n    styleUrls: ['./controllers.component.scss'],\r\n    templateUrl: './controllers.component.html'\r\n})\r\nexport class ControllerComponent implements OnInit, OnDestroy {\r\n    @ViewChild('buttonGroup1', { static: true }) public playButtons: IgxButtonGroupComponent;\r\n    @ViewChild('slider1', { static: true }) public volumeSlider: IgxSliderComponent;\r\n    @ViewChild('slider2', { static: true }) public intervalSlider: IgxSliderComponent;\r\n    @ViewChild('toast', { static: true }) public toast: IgxToastComponent;\r\n\r\n    @Output() public switchChanged = new EventEmitter<{ action: string; value: boolean }>();\r\n    @Output() public volumeChanged = new EventEmitter<number>();\r\n    @Output() public frequencyChanged = new EventEmitter<number>();\r\n    @Output() public playAction = new EventEmitter<{ action: string }>();\r\n\r\n    public volume = 1000;\r\n    public theme = false;\r\n    public frequency = 500;\r\n    public controls = [\r\n        {\r\n            disabled: false,\r\n            icon: 'update',\r\n            label: 'LIVE ALL PRICES',\r\n            selected: false\r\n        },\r\n        {\r\n            disabled: true,\r\n            icon: 'stop',\r\n            label: 'Stop',\r\n            selected: false\r\n        },\r\n        {\r\n            disabled: false,\r\n            icon: 'insert_chart_outlined',\r\n            label: 'Chart',\r\n            selected: false\r\n        }\r\n    ];\r\n\r\n    private selectedButton: number;\r\n    private volumeChanged$: Observable<ISliderValueChangeEventArgs>;\r\n    private volumeChangedSubscription: Subscription;\r\n    private frequencyChanged$: Observable<ISliderValueChangeEventArgs>;\r\n    private frequencyChangedSubscription: Subscription;\r\n\r\n    public ngOnInit(): void {\r\n        this.volumeChanged$ = this.volumeSlider.valueChange.pipe(debounce(() => timer(200)));\r\n        this.volumeChangedSubscription = this.volumeChanged$.subscribe(x => this.volumeChanged.emit(this.volumeSlider.value as number));\r\n\r\n        this.frequencyChanged$ = this.intervalSlider.valueChange.pipe(debounce(() => timer(200)));\r\n        this.frequencyChangedSubscription = this.frequencyChanged$\r\n            .subscribe(() => this.frequencyChanged.emit(this.intervalSlider.value as number));\r\n        \r\n        this.toast.positionSettings.verticalDirection = VerticalAlignment.Middle;\r\n    }\r\n\r\n    public ngOnDestroy(): void {\r\n        this.volumeChangedSubscription.unsubscribe();\r\n        this.frequencyChangedSubscription.unsubscribe();\r\n    }\r\n\r\n    public onButtonSelected(event: IButtonGroupEventArgs): void {\r\n        switch (event.index) {\r\n            case 0: {\r\n                this.disableOtherButtons(event.index, true);\r\n                this.playAction.emit({ action: 'playAll'});\r\n                break;\r\n            }\r\n            case 1: {\r\n                this.disableOtherButtons(event.index, false);\r\n                this.playAction.emit({ action: 'stop'});\r\n                break;\r\n            }\r\n            case 2: {\r\n                this.playAction.emit({ action: 'chart'});\r\n                break;\r\n            }\r\n            default: break;\r\n        }\r\n    }\r\n\r\n    public handleHidden(): void {\r\n        this.playButtons.deselectButton(2);\r\n    }\r\n\r\n    public onChange(action: string, event: IChangeSwitchEventArgs): void {\r\n        this.switchChanged.emit({action, value: event.checked });\r\n    }\r\n\r\n    private disableOtherButtons(ind: number, disableButtons: boolean): void {\r\n        this.volumeSlider.disabled = disableButtons;\r\n        this.intervalSlider.disabled = disableButtons;\r\n        this.selectedButton = ind;\r\n        this.playButtons.buttons.forEach((button, index) => {\r\n            if (index === 1) { button.disabled = !disableButtons; } else {\r\n                this.playButtons.buttons[0].disabled = disableButtons;\r\n                this.playButtons.buttons[2].disabled = disableButtons;\r\n            }\r\n        });\r\n    }\r\n\r\n    get buttonSelected(): number {\r\n        return this.selectedButton || this.selectedButton === 0 ? this.selectedButton : -1;\r\n    }\r\n}\r\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/grid-finjs/grid-finjs.component.ts","content":"/* eslint-disable max-len */\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { Component, ElementRef, EventEmitter, Inject, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { CellType, DefaultSortingStrategy, GridSelectionMode, IGridKeydownEventArgs, IgxGridComponent, IgxOverlayOutletDirective, IRowSelectionEventArgs, OverlaySettings, SortingDirection } from 'igniteui-angular';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { Contract, REGIONS, Stock } from '../data/financialData';\r\nimport { SignalRService } from '../services/signal-r.service';\r\n\r\n@Component({\r\n    selector: 'app-finjs-grid',\r\n    templateUrl: './grid-finjs.component.html',\r\n    styleUrls: ['./grid-finjs.component.scss']\r\n})\r\nexport class GridFinJSComponent implements OnInit {\r\n    @ViewChild('grid1', { static: true }) public grid: IgxGridComponent;\r\n    @ViewChild(IgxOverlayOutletDirective, { static: true }) public outlet: IgxOverlayOutletDirective;\r\n    @Output() public selectedDataChanged = new EventEmitter<Stock[]>();\r\n    @Output() public keyDown = new EventEmitter();\r\n    @Output() public chartColumnKeyDown = new EventEmitter<Stock>();\r\n\r\n    public contracts = Contract;\r\n    public regions = REGIONS;\r\n    public selectionMode: GridSelectionMode = 'multiple';\r\n    public volume = 1000;\r\n    public frequency = 500;\r\n    public data$: BehaviorSubject<Stock[]>;\r\n    public columnFormat = { digitsInfo: '1.3-3' };\r\n    public columnFormatChangeP = { digitsInfo: '3.3-3' };\r\n    public showToolbar = true;\r\n    public isLoading = true;\r\n    public overlaySettings: OverlaySettings = {\r\n        modal: false\r\n    };\r\n\r\n    constructor(private el: ElementRef, @Inject(DOCUMENT) private document: Document, public dataService: SignalRService) { }\r\n\r\n    public ngOnInit(): void {\r\n        this.dataService.getData(this.volume);\r\n        this.overlaySettings.outlet = this.outlet;\r\n        this.data$ = this.dataService.data;\r\n\r\n        this.data$.subscribe((data) => {\r\n            if (data.length !== 0) {\r\n                this.isLoading = false;\r\n            };\r\n        });\r\n\r\n        // Set initially grouped columns\r\n        this.toggleGrouping();\r\n    }\r\n\r\n    public rowSelectionChanged(args: IRowSelectionEventArgs): void {\r\n        this.grid.clearCellSelection();\r\n        this.selectedDataChanged.emit(args.newSelection);\r\n    }\r\n\r\n    public toggleGrouping(): void {\r\n        if (this.grid.groupingExpressions.length > 0) {\r\n            this.grid.groupingExpressions = [];\r\n        } else {\r\n            this.grid.groupingExpressions = [\r\n                {\r\n                    dir: SortingDirection.Desc,\r\n                    fieldName: 'category',\r\n                    ignoreCase: false,\r\n                    strategy: DefaultSortingStrategy.instance()\r\n                },\r\n                {\r\n                    dir: SortingDirection.Desc,\r\n                    fieldName: 'type',\r\n                    ignoreCase: false,\r\n                    strategy: DefaultSortingStrategy.instance()\r\n                },\r\n                {\r\n                    dir: SortingDirection.Desc,\r\n                    fieldName: 'contract',\r\n                    ignoreCase: false,\r\n                    strategy: DefaultSortingStrategy.instance()\r\n                }\r\n            ];\r\n        }\r\n    }\r\n\r\n    public gridKeydown(evt: KeyboardEvent): void {\r\n        if (this.grid.selectedRows.length > 0 &&\r\n            evt.shiftKey === true && evt.ctrlKey === true && evt.key.toLowerCase() === 'd') {\r\n            evt.preventDefault();\r\n            this.keyDown.emit();\r\n        }\r\n    }\r\n\r\n    public customKeydown(args: IGridKeydownEventArgs): void {\r\n        const target: CellType = args.target as CellType;\r\n        const evt: KeyboardEvent = args.event as KeyboardEvent;\r\n        const type = args.targetType;\r\n\r\n        if (type === 'dataCell' && target.column.field === 'Chart' && evt.key.toLowerCase() === 'enter') {\r\n            this.grid.selectRows([target.row.key], true);\r\n            this.chartColumnAction(target);\r\n        }\r\n    }\r\n\r\n    public chartColumnAction(target: CellType): void {\r\n        this.chartColumnKeyDown.emit(target.row.data);\r\n    }\r\n\r\n    get gridWrapper(): HTMLElement {\r\n        return this.el.nativeElement.querySelector('.grid__wrapper') as HTMLElement;\r\n    }\r\n\r\n    get controlsWrapper(): HTMLElement {\r\n        return this.document.body.querySelector('.controls-wrapper') as HTMLElement;\r\n    }\r\n\r\n    /** Grid CellStyles and CellClasses */\r\n    private negative = (rowData: any): boolean => rowData['changeP'] < 0;\r\n    private positive = (rowData: any): boolean => rowData['changeP'] > 0;\r\n    private changeNegative = (rowData: any): boolean => rowData['changeP'] < 0 && rowData['changeP'] > -1;\r\n    private changePositive = (rowData: any): boolean => rowData['changeP'] > 0 && rowData['changeP'] < 1;\r\n    private strongPositive = (rowData: any): boolean => rowData['changeP'] >= 1;\r\n    private strongNegative = (rowData: any): boolean => rowData['changeP'] <= -1;\r\n\r\n    // eslint-disable-next-line @typescript-eslint/member-ordering\r\n    public trends = {\r\n        changeNeg: this.changeNegative,\r\n        changePos: this.changePositive,\r\n        negative: this.negative,\r\n        positive: this.positive,\r\n        strongNegative: this.strongNegative,\r\n        strongPositive: this.strongPositive\r\n    };\r\n\r\n    // eslint-disable-next-line @typescript-eslint/member-ordering\r\n    public trendsChange = {\r\n        changeNeg2: this.changeNegative,\r\n        changePos2: this.changePositive,\r\n        strongNegative2: this.strongNegative,\r\n        strongPositive2: this.strongPositive\r\n    };\r\n}\r\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/grid-finjs/controllers.component.html","content":"<div class=\"controls-wrapper\">\r\n    <div class=\"controls-holder\">\r\n        <div class=\"switches\">\r\n            <div class=\"control-item\">\r\n                <igx-switch [checked]=\"false\" [(ngModel)]=\"theme\" (change)=\"onChange('theme', $event)\">Dark</igx-switch>\r\n            </div>\r\n            <div class=\"control-item\">\r\n                <igx-switch [checked]=\"true\" (change)=\"onChange('grouped', $event)\" color=\"blue\"\r\n                    cssClass=\"finjs-sample-switch\">\r\n                    Grouped</igx-switch>\r\n            </div>\r\n            <div class=\"control-item\">\r\n                <igx-switch [checked]=\"true\" (change)=\"onChange('toolbar', $event)\" color=\"blue\"\r\n                    cssClass=\"finjs-sample-switch\">Toolbar</igx-switch>\r\n            </div>\r\n            <div class=\"finjs-slider control-item\">\r\n                <label for=\"slider\">Records: {{volume}}</label>\r\n                <igx-slider #slider1 id=\"slider\" [minValue]=\"0\" [maxValue]=\"10000\" [(ngModel)]=\"volume\" [step]=\"100\"\r\n                    [thumbLabelVisibilityDuration]=\"250\" [continuous]=\"true\"></igx-slider>\r\n            </div>\r\n            <div class=\"finjs-slider control-item\">\r\n                <label for=\"slider\">Frequency: {{frequency}} ms</label>\r\n                <igx-slider #slider2 id=\"slider\" [minValue]=\"100\" [maxValue]=\"3000\" [step]=\"10\" [(ngModel)]=\"frequency\"\r\n                    [thumbLabelVisibilityDuration]=\"250\" [continuous]=\"true\"></igx-slider>\r\n            </div>\r\n        </div>\r\n        <div class=\"control-item finjs-play-controls\">\r\n            <igx-buttongroup class=\"finjssample-btn-group\" #buttonGroup1 [multiSelection]=\"false\" [values]=\"controls\"\r\n                (selected)=\"onButtonSelected($event)\"></igx-buttongroup>\r\n        </div>\r\n    </div>\r\n    <div class=\"sample-toolbar\">\r\n        <span *ngIf=\"buttonSelected === 1\">Feeding {{volume}} records every {{frequency / 1000}} sec.\r\n            {{volume}} records updated. </span>\r\n        <span *ngIf=\"buttonSelected === 0\">Feeding {{volume}} records every {{frequency / 1000}} sec.\r\n            ~{{volume/5}} records updated.</span>\r\n    </div>\r\n    <igx-toast #toast (onClosed)=\"handleHidden()\"></igx-toast>\r\n</div>\r\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/grid-finjs/grid-finjs.component.html","content":"<div class=\"grid__wrapper\">\r\n    <igx-grid #grid1\r\n        [igxPreventDocumentScroll]=\"true\"\r\n        width=\"100%\" height=\"100%\"\r\n        displayDensity=\"compact\"\r\n        hiddenColumnsText=\"Hidden\"\r\n        primaryKey=\"id\"\r\n        [autoGenerate]=\"false\"\r\n        [data]=\"data$ | async\"\r\n        [hideGroupedColumns]=\"true\"\r\n        [rowSelection]=\"selectionMode\"\r\n        [allowFiltering]=\"true\"\r\n        [moving]=\"true\"\r\n        [filterMode]=\"'excelStyleFilter'\"\r\n        (rowSelectionChanging)=\"rowSelectionChanged($event)\"\r\n        (keydown)=\"gridKeydown($event)\"\r\n        (gridKeydown)=\"customKeydown($event)\"\r\n        [isLoading]=\"isLoading\">\r\n\r\n        <igx-grid-toolbar *ngIf=\"showToolbar\">\r\n            <igx-grid-toolbar-actions>\r\n                <igx-grid-toolbar-hiding title=\"Indicators\"></igx-grid-toolbar-hiding>\r\n                <igx-grid-toolbar-pinning></igx-grid-toolbar-pinning>\r\n                <igx-grid-toolbar-exporter [exportCSV]=\"false\">\r\n                    <span excelText>Export to Excel</span>\r\n                </igx-grid-toolbar-exporter>\r\n            </igx-grid-toolbar-actions>\r\n        </igx-grid-toolbar>\r\n\r\n        <!-- Empty templates for Sorting,Moving,Hiding, Pinning actions inside ESF dialog -->\r\n        <!-- <ng-template igxExcelStyleSorting></ng-template>\r\n        <ng-template igxExcelStyleMoving></ng-template>\r\n        <ng-template igxExcelStyleHiding></ng-template>\r\n        <ng-template igxExcelStylePinning></ng-template> -->\r\n\r\n        <igx-column [field]=\"'id'\" [sortable]=\"true\" [groupable]=\"true\"></igx-column>\r\n        <igx-column [field]=\"'category'\" [width]=\"'120px'\" [groupable]=\"true\" [sortable]=\"true\"></igx-column>\r\n        <igx-column [field]=\"'type'\" [width]=\"'100px'\" [groupable]=\"true\" [sortable]=\"true\" [filterable]=\"false\">\r\n        </igx-column>\r\n        <igx-column [field]=\"'contract'\" [width]=\"'110px'\" [groupable]=\"true\" [sortable]=\"true\" [editable]=\"true\">\r\n            <ng-template igxCellEditor let-cell=\"cell\" let-value>\r\n                <igx-select [overlaySettings]=\"overlaySettings\" [placeholder]=\"value\" [(ngModel)]=\"cell.editValue\" [igxFocus]=\"true\">\r\n                    <igx-select-item *ngFor=\"let c of contracts\" [value]=\"c\">{{ c }}</igx-select-item>\r\n                </igx-select>\r\n            </ng-template>\r\n        </igx-column>\r\n        <igx-column [field]=\"'settlement'\" [width]=\"'100px'\" [groupable]=\"true\" [sortable]=\"true\"></igx-column>\r\n        <igx-column [field]=\"'country'\" [width]=\"'100px'\" [groupable]=\"true\" [sortable]=\"true\" [editable]=\"true\"></igx-column>\r\n        <igx-column [field]=\"'region'\" [width]=\"'110px'\" [groupable]=\"true\" [sortable]=\"true\" [editable]=\"true\">\r\n            <ng-template igxCellEditor let-cell=\"cell\" let-value>\r\n                <igx-select [overlaySettings]=\"overlaySettings\" [placeholder]=\"value\" [(ngModel)]=\"cell.editValue\" [igxFocus]=\"true\">\r\n                    <igx-select-item *ngFor=\"let r of regions\" [value]=\"r.Name\">{{ r.Name }}</igx-select-item>\r\n                </igx-select>\r\n            </ng-template>\r\n        </igx-column>\r\n        <igx-column [field]=\"'lastUpdated'\" [width]=\"'120px'\" [editable]=\"true\" header=\"Last Update\" dataType=\"date\"></igx-column>\r\n        <igx-column [field]=\"'openPrice'\" [width]=\"'120px'\" dataType=\"currency\" [pipeArgs]=\"columnFormat\"  [sortable]=\"true\"></igx-column>\r\n        <igx-column [field]=\"'price'\" [width]=\"'110px'\" dataType=\"number\" [cellClasses]=\"trends\"\r\n            [sortable]=\"true\">\r\n            <ng-template igxCell let-cell=\"cell\">\r\n                <div class=\"finjs-icons\">\r\n                    <span>{{cell.value | currency:'USD':'symbol':'1.4-4'}}</span>\r\n                    <igx-icon *ngIf=\"trends.positive(cell.row.data)\">trending_up</igx-icon>\r\n                    <igx-icon *ngIf=\"trends.negative(cell.row.data)\">trending_down</igx-icon>\r\n                </div>\r\n            </ng-template>\r\n        </igx-column>\r\n        <igx-column [field]=\"'Chart'\" [width]=\"'60px'\" [hidden]=\"false\" [filterable]='false'>\r\n            <ng-template igxCell let-cell=\"cell\" class=\"center-text\">\r\n                <button class=\"button-icon\" igxButton=\"icon\" tabindex=\"-1\">\r\n                    <igx-icon family=\"material\" (click)=\"chartColumnAction(cell)\">insert_chart_outlined</igx-icon>\r\n                </button>\r\n            </ng-template>\r\n        </igx-column>\r\n\r\n        <igx-column [field]=\"'change'\" [width]=\"'120px'\" dataType=\"number\" [headerClasses]=\"'headerAlignSyle'\"\r\n            [sortable]=\"true\" [cellClasses]=\"trendsChange\" >\r\n        </igx-column>\r\n\r\n        <igx-column [field]=\"'changeP'\" [width]=\"'110px'\" dataType=\"percent\"\r\n            [pipeArgs]=\"columnFormatChangeP\" [sortable]=\"true\" [cellClasses]=\"trendsChange\">\r\n        </igx-column>\r\n\r\n        <igx-column [field]=\"'buy'\" [width]=\"'110px'\" dataType=\"currency\" [pipeArgs]=\"columnFormat\"\r\n            [sortable]=\"true\"></igx-column>\r\n        <igx-column [field]=\"'sell'\" [width]=\"'110px'\" dataType=\"currency\" [pipeArgs]=\"columnFormat\"\r\n            [sortable]=\"true\"></igx-column>\r\n        <igx-column [field]=\"'spread'\" [width]=\"'110px'\" dataType=\"number\"  [pipeArgs]=\"columnFormat\" >\r\n        </igx-column>\r\n        <igx-column [field]=\"'volume'\" [width]=\"'110px'\" dataType=\"number\"  [pipeArgs]=\"columnFormat\"  [sortable]=\"true\"></igx-column>\r\n        <igx-column [field]=\"'highD'\" [width]=\"'110px'\" dataType=\"currency\" [pipeArgs]=\"columnFormat\"  [sortable]=\"true\"></igx-column>\r\n        <igx-column [field]=\"'lowD'\" [width]=\"'110px'\" dataType=\"currency\" [pipeArgs]=\"columnFormat\"\r\n            [sortable]=\"true\"></igx-column>\r\n        <igx-column [field]=\"'highY'\" [width]=\"'110px'\" dataType=\"currency\" [pipeArgs]=\"columnFormat\"  [sortable]=\"true\"></igx-column>\r\n        <igx-column [field]=\"'lowY'\" [width]=\"'110px'\" dataType=\"currency\" [pipeArgs]=\"columnFormat\"  [sortable]=\"true\"></igx-column>\r\n        <igx-column [field]=\"'startY'\" [width]=\"'110px'\" dataType=\"currency\" [pipeArgs]=\"columnFormat\"  [sortable]=\"true\"></igx-column>\r\n        <!-- <igx-column [field]=\"'Grid'\" [width]=\"'80px'\" [hidden]=\"false\" [filterable]='false'>\r\n            <ng-template igxCell let-cell=\"cell\" class=\"center-text\">\r\n                <button class=\"button-icon\" igxButton=\"icon\" [igxRippleCentered]=\"true\">\r\n                    <igx-icon (click)=\"chartClick(cell)\" family=\"material\">table_charttable_chart</igx-icon>\r\n                </button>\r\n            </ng-template>\r\n        </igx-column> -->\r\n        <igx-column [field]=\"'indGrou'\" [width]=\"'100px'\" [filterable]='false'></igx-column>\r\n        <igx-column [field]=\"'indSect'\" [width]=\"'120px'\" [filterable]='false' [resizable]=\"true\"></igx-column>\r\n        <igx-column [field]=\"'indSubg'\" [width]=\"'100px'\" [filterable]='false'></igx-column>\r\n        <igx-column [field]=\"'secType'\" [width]=\"'90px'\" [filterable]='false'></igx-column>\r\n        <igx-column [field]=\"'issuerN'\" [width]=\"'170px'\" [filterable]='false' [resizable]=\"true\"></igx-column>\r\n        <igx-column [field]=\"'moodys'\" [width]=\"'60px'\" [filterable]='false'></igx-column>\r\n        <igx-column [field]=\"'fitch'\" [width]=\"'60px'\" [filterable]='false'></igx-column>\r\n        <igx-column [field]=\"'dbrs'\" [width]=\"'60px'\" [filterable]='false'></igx-column>\r\n        <igx-column [field]=\"'collatT'\" [width]=\"'90px'\" [filterable]='false'></igx-column>\r\n        <igx-column [field]=\"'curncy'\" [width]=\"'60px'\" [filterable]='false'></igx-column>\r\n        <igx-column [field]=\"'security'\" [width]=\"'120px'\" [filterable]='false'></igx-column>\r\n        <igx-column [field]=\"'sector'\" [width]=\"'80px'\" [filterable]='false'></igx-column>\r\n        <igx-column [field]=\"'cusip'\" [width]=\"'100px'\" [filterable]='false'></igx-column>\r\n        <igx-column [field]=\"'ticker'\" [width]=\"'60px'\" [filterable]='false'></igx-column>\r\n        <igx-column [field]=\"'cpn'\" [width]=\"'80px'\" [filterable]='false'></igx-column>\r\n        <igx-column [field]=\"'maturity'\" [width]=\"'120px'\" [filterable]='false'></igx-column>\r\n        <igx-column [field]=\"'krD_3YR'\" [width]=\"'110px'\" [filterable]='false'></igx-column>\r\n        <igx-column [field]=\"'zV_SPREAD'\" [width]=\"'90px'\" [filterable]='false'></igx-column>\r\n        <igx-column [field]=\"'kRD_5YR'\" [width]=\"'50px'\" [filterable]='false'></igx-column>\r\n        <igx-column [field]=\"'kRD_1YR'\" [width]=\"'80px'\" [filterable]='false'></igx-column>\r\n        <igx-column [field]=\"'indGrou'\" [width]=\"'100px'\" [filterable]='false'></igx-column>\r\n        <igx-column [field]=\"'indSect'\" [width]=\"'100px'\" [filterable]='false' [resizable]=\"true\"></igx-column>\r\n        <igx-column [field]=\"'indSubg'\" [width]=\"'100px'\" [filterable]='false'></igx-column>\r\n        <igx-column [field]=\"'secType'\" [width]=\"'90px'\" [filterable]='false'></igx-column>\r\n        <igx-column [field]=\"'issuerN'\" [width]=\"'170px'\" [filterable]='false' [resizable]=\"true\"></igx-column>\r\n        <igx-column [field]=\"'moodys'\" [width]=\"'60px'\" [filterable]='false'></igx-column>\r\n        <igx-column [field]=\"'fitch'\" [width]=\"'60px'\" [filterable]='false'></igx-column>\r\n        <igx-column [field]=\"'dbrs'\" [width]=\"'60px'\" [filterable]='false'></igx-column>\r\n        <igx-column [field]=\"'collatT'\" [width]=\"'90px'\" [filterable]='false'></igx-column>\r\n    </igx-grid>\r\n</div>\r\n\r\n<div igxOverlayOutlet #outlet=\"overlay-outlet\">\r\n</div>\r\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/grid-finjs/controllers.component.scss","content":":host ::ng-deep {\r\n    .fin-dark-theme {\r\n        .finjs-slider,\r\n        .sample-toolbar {\r\n            color: rgba(255, 255, 255, 0.87);\r\n        }\r\n    }\r\n\r\n    .controls-holder {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n        flex-wrap: wrap;\r\n        width: 100%;\r\n        padding-bottom: 15px;\r\n    }\r\n    .switches {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n        flex: 1 0 0%;\r\n        padding-right: 20px;\r\n        font-size: 0.9rem;\r\n    }\r\n    .control-item:not(:last-child) {\r\n        padding-right: 20px;\r\n    }\r\n    .igx-slider,\r\n    .igx-slider--disabled {\r\n        height: 24px;\r\n    }\r\n    .finjs-slider {\r\n        width: 40%;\r\n        min-width: 145px;\r\n    }\r\n    .finjs-play-controls {\r\n        width: 45%;\r\n        min-width: 620px;\r\n        margin-top: 10px;\r\n    }\r\n    .sample-toolbar {\r\n        height: 20px;\r\n        font-size: 0.8rem;\r\n        line-height: 20px;\r\n        /* position: absolute; */\r\n        /* bottom: 10px; */\r\n        /* left: 10px; */\r\n        margin-top: 11px;\r\n    }\r\n    .igx-button--icon {\r\n        width: 2rem;\r\n        height: 2rem;\r\n    }\r\n}\r\n\r\n.controls-wrapper {\r\n    display: flex;\r\n    justify-content: center;\r\n    position: relative;\r\n    padding: 0px 15px;\r\n}\r\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/grid-finjs/grid-finjs.component.scss","content":".grid__wrapper {\r\n    position: relative;\r\n    width: 100%;\r\n    height: 98%;\r\n    top: 0;\r\n    left: 0;\r\n    padding: 15px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    app-finjs-grid {\r\n        height: 100%;\r\n    }\r\n}\r\n\r\n:host ::ng-deep {\r\n    .finjs-icons {\r\n        display: flex;\r\n        align-items: center;\r\n        igx-icon {\r\n            font-size: 16px;\r\n            width: 16px;\r\n            height: 16px;\r\n            margin-left: 4px;\r\n        }\r\n    }\r\n    .igx-grid__grouparea {\r\n        max-height: 100%;\r\n        height: auto;\r\n    }\r\n    .changePos,\r\n    .changeNeg,\r\n    .strongPositive,\r\n    .strongNegative {\r\n        color: #fff !important;\r\n        .igx-grid__td-text {\r\n            padding: 2px 5px;\r\n        }\r\n    }\r\n    .positive {\r\n        color: #4eb862 !important;\r\n    }\r\n    .positive.strongPositive {\r\n        .igx-grid__td-text {\r\n            color: rgba(78, 184, 98, 0.8) !important;\r\n        }\r\n    }\r\n    .negative {\r\n        color: #d31642 !important;\r\n    }\r\n    .negative.strongNegative {\r\n        .igx-grid__td-text {\r\n            color: rgba(255, 19, 74, 0.8) !important;\r\n        }\r\n    }\r\n    // NORMAL\r\n    // positive\r\n    .changePos {\r\n        .igx-grid__td-text {\r\n            background: #335e3b;\r\n        }\r\n    }\r\n    .changePos1 {\r\n        background: #335e3b;\r\n        color: #fff;\r\n    }\r\n    .changePos2 {\r\n        .igx-grid__td-text {\r\n            border-right: 4px solid #335e3b;\r\n            padding-right: 15px;\r\n        }\r\n    }\r\n    // negative\r\n    .changeNeg {\r\n        .igx-grid__td-text {\r\n            background: #7a1c32;\r\n        }\r\n    }\r\n    .changeNeg1 {\r\n        color: #fff;\r\n        background: #7a1c32;\r\n    }\r\n    .changeNeg2 {\r\n        .igx-grid__td-text {\r\n            border-right: 4px solid #7a1c32;\r\n            padding-right: 9px;\r\n        }\r\n    }\r\n    // selected\r\n    .igx-grid__td--selected.changePos1,\r\n    .igx-grid__td--selected.changePos2,\r\n    .igx-grid__td--selected.changePos {\r\n        background-color: #335e3b !important;\r\n        .finjs-icons,\r\n        .igx-grid__td-text {\r\n            color: #fff;\r\n        }\r\n    }\r\n    .igx-grid__td--selected.changeNeg1,\r\n    .igx-grid__td--selected.changeNeg2,\r\n    .igx-grid__td--selected.changeNeg {\r\n        background-color: #7a1c32 !important;\r\n        .finjs-icons,\r\n        .igx-grid__td-text {\r\n            color: #fff;\r\n        }\r\n    }\r\n    // STRONG\r\n    // positive\r\n    .strongPositive {\r\n        .igx-grid__td-text {\r\n            background: #459a55;\r\n        }\r\n    }\r\n    .strongPositive1 {\r\n        background: #459a55;\r\n        color: #fff;\r\n    }\r\n    .strongPositive2 {\r\n        .igx-grid__td-text {\r\n            border-right: 4px solid #459a55;\r\n            padding-right: 15px;\r\n        }\r\n    }\r\n    // negative\r\n    .strongNegative {\r\n        .igx-grid__td-text {\r\n            background: #d31642;\r\n            color: #fff;\r\n        }\r\n    }\r\n    .strongNegative1 {\r\n        background: #d31642;\r\n        color: #fff;\r\n    }\r\n    .strongNegative2 {\r\n        .igx-grid__td-text {\r\n            border-right: 4px solid #d31642;\r\n            padding-right: 9px;\r\n        }\r\n    }\r\n    // selected\r\n    .igx-grid__td--selected.strongPositive1,\r\n    .igx-grid__td--selected.strongPositive2,\r\n    .igx-grid__td--selected.strongPositive {\r\n        background-color: #459a55 !important;\r\n        .finjs-icons,\r\n        .igx-grid__td-text {\r\n            color: #fff;\r\n        }\r\n    }\r\n    .igx-grid__td--selected.strongNegative1,\r\n    .igx-grid__td--selected.strongNegative2,\r\n    .igx-grid__td--selected.strongNegative {\r\n        background-color: #d31642 !important;\r\n        .finjs-icons,\r\n        .igx-grid__td-text {\r\n            color: #fff;\r\n        }\r\n    }\r\n    .igx-grid__outlet span,\r\n    .igx-excel-filter span,\r\n    .igx-excel-filter header,\r\n    .igx-excel-filter input {\r\n        font-size: 0.8125rem;\r\n    }\r\n    .igx-button--icon {\r\n        width: 2rem;\r\n        height: 2rem;\r\n    }\r\n}\r\n\r\nigx-grid {\r\n    flex: 1 0 0%;\r\n}"},{"hasRelativeAssetsUrls":false,"path":"src/_app-layout.scss","content":".sample-wrapper {\r\n    width: inherit;\r\n    position: relative;\r\n    height: 100%;\r\n    margin: 0 auto;\r\n    background: transparent;\r\n}\r\n\r\n.sample-content {\r\n    display: flex;\r\n    flex-grow: 1;\r\n    flex-flow: row wrap;\r\n    justify-content: flex-start;\r\n    padding: 0;\r\n    -webkit-animation: fade-in .3s cubic-bezier(0.390, 0.575, 0.565, 1.000) both;\r\n    -moz-animation: fade-in .3s cubic-bezier(0.390, 0.575, 0.565, 1.000) both;\r\n    animation: fade-in .3s cubic-bezier(0.390, 0.575, 0.565, 1.000) both;\r\n}\r\n\r\n.sample-column {\r\n    display: flex;\r\n    flex-flow: column nowrap;\r\n    flex: 1 0 25%;\r\n    align-content: flex-start;\r\n    margin: 16px;\r\n    min-width: 280px;\r\n}\r\n\r\n.sample-title {\r\n    color: #0375be;\r\n    margin-bottom: 12px;\r\n    margin-top: 12px;\r\n}\r\n\r\n.sample-title .light {\r\n    font-weight: 400;\r\n}\r\n\r\n.sample-description {\r\n    font-size: 14px;\r\n    font-weight: normal;\r\n    color: #717171;\r\n}\r\n\r\n@-webkit-keyframes color-change-2x {\r\n    0% {\r\n        background: #fdf8f0;\r\n    }\r\n    100% {\r\n        background: #f6e7ec;\r\n    }\r\n}\r\n\r\n@keyframes color-change-2x {\r\n    0% {\r\n        background: #fdf8f0;\r\n    }\r\n    100% {\r\n        background: #f6e7ec;\r\n    }\r\n}\r\n\r\n@-webkit-keyframes fade-in {\r\n    0% {\r\n        opacity: 0;\r\n    }\r\n    100% {\r\n        opacity: 1;\r\n    }\r\n}\r\n\r\n@keyframes fade-in {\r\n    0% {\r\n        opacity: 0;\r\n    }\r\n    100% {\r\n        opacity: 1;\r\n    }\r\n}\r\n\r\n.headerAlignSyle {\r\n    text-align: right !important;\r\n}\r\n\r\n"},{"hasRelativeAssetsUrls":false,"path":"src/_variables.scss","content":"@use 'igniteui-angular/theming' as *;\r\n@forward 'igniteui-angular/theming';\r\n\r\n$legacy-support: true;\r\n$palette: $light-material-palette;\r\n$schema: $light-material-schema;\r\n\r\n$default-palette: $palette;\r\n$igx-legacy-support: $legacy-support;\r\n\r\n$green-palette: palette(\r\n    $primary: #09f,\r\n    $secondary: #72da67,\r\n    $grays: #fff,\r\n    $surface: #333\r\n);\r\n\r\n$grays-btn-color: color($green-palette, 'grays', 800);\r\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.module.ts","content":"import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { AppComponent } from \"./app.component\";\r\nimport { IgxPreventDocumentScrollModule } from \"./directives/prevent-scroll.directive\";\r\nimport { IgxCategoryChartModule } from \"igniteui-angular-charts\";\r\nimport { \r\n\tIgxGridModule,\r\n\tIgxButtonGroupModule,\r\n\tIgxIconModule,\r\n\tIgxSliderModule,\r\n\tIgxToggleModule,\r\n\tIgxButtonModule,\r\n\tIgxExcelExporterService,\r\n\tIgxCsvExporterService,\r\n\tIgxSwitchModule,\r\n\tIgxRippleModule,\r\n\tIgxDialogModule,\r\n\tIgxToastModule\r\n } from \"igniteui-angular\";\r\nimport { FinJSDemoComponent } from \"./grid-finjs/main.component\";\r\nimport { FinancialDataService } from \"./services/financial.service\";\r\nimport { ControllerComponent } from \"./grid-finjs/controllers.component\";\r\nimport { GridFinJSComponent } from \"./grid-finjs/grid-finjs.component\";\r\nimport { HttpClientModule } from \"@angular/common/http\";\r\nimport { SignalRService } from \"./services/signal-r.service\";\n\n\n\n@NgModule({\n  bootstrap: [AppComponent],\n  declarations: [\r\n\tAppComponent,\r\n\tFinJSDemoComponent,\r\n\tControllerComponent,\r\n\tGridFinJSComponent\r\n],\n  imports: [\r\n\tBrowserModule,\r\n\tBrowserAnimationsModule,\r\n\tFormsModule,\r\n\tIgxPreventDocumentScrollModule,\r\n\tIgxGridModule,\r\n\tIgxButtonGroupModule,\r\n\tIgxIconModule,\r\n\tIgxSliderModule,\r\n\tIgxToggleModule,\r\n\tIgxButtonModule,\r\n\tIgxSwitchModule,\r\n\tIgxRippleModule,\r\n\tIgxCategoryChartModule,\r\n\tIgxDialogModule,\r\n\tIgxToastModule,\r\n\tHttpClientModule\r\n],\n  providers: [\r\n\tFinancialDataService,\r\n\tIgxExcelExporterService,\r\n\tIgxCsvExporterService,\r\n\tSignalRService\r\n],\n  entryComponents: [],\n  schemas: []\n})\nexport class AppModule {}\n","isMain":true,"fileExtension":"ts","fileHeader":"modules"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.component.html","content":"<app-finjs-main></app-finjs-main>"},{"hasRelativeAssetsUrls":false,"path":"package.json","content":"{\n  \"name\": \"example-app\",\n  \"version\": \"0.0.0\",\n  \"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"ng serve\",\n    \"build\": \"ng build\",\n    \"watch\": \"ng build --watch --configuration development\",\n    \"test\": \"ng test\"\n  },\n  \"private\": true,\n  \"dependencies\": {\n    \"@angular/animations\": \"^14.1.0\",\n    \"@angular/cdk\": \"^14.0.0\",\n    \"@angular/common\": \"^14.1.0\",\n    \"@angular/compiler\": \"^14.1.0\",\n    \"@angular/core\": \"^14.1.0\",\n    \"@angular/forms\": \"^14.1.0\",\n    \"@angular/platform-browser\": \"^14.1.0\",\n    \"@angular/platform-browser-dynamic\": \"^14.1.0\",\n    \"@angular/router\": \"^14.1.0\",    \"@types/hammerjs\": \"^2.0.39\",\n    \"@microsoft/signalr\": \"^5.0.11\",\n    \"core-js\": \"2.6.2\",\n    \"hammerjs\": \"^2.0.8\",\n    \"igniteui-angular\": \"^14.2.0\",\n    \"igniteui-angular-charts\": \"^14.0.0\",\n    \"igniteui-angular-core\": \"^14.0.0\",    \"immediate\": \"^3.2.3\",\n    \"intl\": \"^1.2.5\",\n    \"rxjs\": \"^6.6.7\",\n    \"tslib\": \"^2.3.1\",\n    \"zone.js\": \"~0.11.4\"\n  },\n  \"devDependencies\": {\n    \"@angular-devkit/build-angular\": \"^14.0.0\",\n    \"@angular/cli\": \"^14.0.0\",\n    \"@angular/compiler-cli\": \"^14.1.0\",\n    \"@types/jasmine\": \"~3.10.0\",\n    \"@types/node\": \"^12.11.1\",\n    \"jasmine-core\": \"~3.10.0\",\n    \"karma\": \"~6.3.0\",\n    \"karma-chrome-launcher\": \"~3.1.0\",\n    \"karma-coverage\": \"~2.0.3\",\n    \"karma-jasmine\": \"~4.0.0\",\n    \"karma-jasmine-html-reporter\": \"~1.7.0\",\n    \"typescript\": \"~4.7.3\"\n  }\n}\n"}],"sampleDependencies":"{\"@angular/animations\":\"^14.1.0\",\"@angular/common\":\"^14.1.0\",\"@angular/compiler\":\"^14.1.0\",\"@angular/core\":\"^14.1.0\",\"@angular/forms\":\"^14.1.0\",\"@angular/platform-browser\":\"^14.1.0\",\"@angular/platform-browser-dynamic\":\"^14.1.0\",\"@microsoft/signalr\":\"^5.0.11\",\"@types/hammerjs\":\"^2.0.39\",\"core-js\":\"2.6.2\",\"hammerjs\":\"^2.0.8\",\"igniteui-angular\":\"14.2.0\",\"igniteui-angular-charts\":\"14.0.0\",\"igniteui-angular-core\":\"14.0.0\",\"intl\":\"^1.2.5\",\"rxjs\":\"^6.6.7\",\"tslib\":\"^2.3.1\",\"zone.js\":\"~0.11.4\"}"}